{
	"name"			: "TukuBoard1.0",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 10,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "http://sohta02.web.fc2.com/familyday_orgel.html",
	"productInfoURL": "http://sohta02.web.fc2.com/familyday_orgel.html",
	"sampleDir"		: "sample/TukuBoard",						// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_921600"],

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"TukuBoard1.0\"

#include \"TukurutchEsp.h\"


WebsocketsServer wsServer;

#define P_GND		4

#define P_BUZZER		19
#define LEDC_BUZZER		8

#define numof(a) (sizeof(a)/sizeof((a)[0]))

struct port {uint8_t sig; uint8_t gnd;};

esp_adc_cal_characteristics_t adc_chars;
const uint8_t sensorTable[4] = {7, 6, 0, 3};
uint16_t _getAdc1(uint8_t idx, uint16_t count)
{
  if(!idx || idx > numof(sensorTable)) return 0;
  idx--;

  if(count == 0) count = 1;
  uint32_t sum = 0;
  for(int i = 0; i < count; i++)
    sum += adc1_get_raw((adc1_channel_t)sensorTable[idx]);
  return esp_adc_cal_raw_to_voltage(sum/count, &adc_chars);
}

const struct port ledTable[6] = {{2,0}, {26,25}, {17,16}, {27,14}, {12,13}, {5,23}};
void _setLED(uint8_t idx, uint8_t onoff)
{
  if(!idx || idx > numof(ledTable)) return;
  idx--;

  digitalWrite(ledTable[idx].sig, onoff);
  pinMode(ledTable[idx].sig, OUTPUT);
  if(ledTable[idx].gnd) {
    digitalWrite(ledTable[idx].gnd, LOW);
    pinMode(ledTable[idx].gnd, OUTPUT);
  }
}

const struct port swTable[3] = {{26,17},{16,14},{12,5}};
uint8_t _getSw(uint8_t idx)
{
  if(!idx || idx > numof(swTable)) return 0;
  idx--;

  pinMode(swTable[idx].sig, INPUT_PULLUP);
  if(swTable[idx].gnd) {
    digitalWrite(swTable[idx].gnd, LOW);
    pinMode(swTable[idx].gnd, OUTPUT);
  }
  return digitalRead(swTable[idx].sig) ? 0: 1;
}

void _tone(int sound, int ms) {
  ledcWriteTone(LEDC_BUZZER, sound);
  delay(ms);
  ledcWriteTone(LEDC_BUZZER, 0);
}

void onConnect(String ip)
{
  _setLED(1,1);
  _tone(T_C4, 250);
  _tone(T_D4, 250);
  _tone(T_E4, 250);

  wsServer.listen(PORT_WEBSOCKET);
  Serial.println(ip);
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
int i;
_setLED(1,0);
pinMode(P_GND, OUTPUT);
digitalWrite(P_GND, LOW);
ledcSetup(LEDC_BUZZER, 5000/*Hz*/, 13/*bit*/);
ledcAttachPin(P_BUZZER, LEDC_BUZZER);

#define DEFAULT_VREF    1100
adc1_config_width(ADC_WIDTH_BIT_12);
esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, DEFAULT_VREF, &adc_chars);
for(i=0; i<numof(sensorTable); i++)
  adc1_config_channel_atten((adc1_channel_t)sensorTable[i], ADC_ATTEN_DB_11);

_tone(T_C5, 100);
Serial.begin(115200);
if(_getSw(1)) {
  delay(100);
  _tone(T_C5, 100);
  WiFi.mode(WIFI_STA);
  WiFi.beginSmartConfig();
  Serial.println(\"Waiting for SmartConfig.\");
  while (!WiFi.smartConfigDone()) {
    delay(2000);
    _setLED(1,1);
    _tone(T_C5, 100);
    _setLED(1,0);
  }
  Serial.println(\"SmartConfig received.\");
}
#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
  loopWebSocket();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                                   | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+---------------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",								"runArduino",					{}],	// 変更禁止

		["w", "set LED %d.led %d.onoff",					"setLED",			1,"On",		{"remote":["B","B"],	"func":"_setLED({0},{1});"}],

//		["w", "play tone %d.noteJ1 beat %d.beats",			"BuzzerJ1",		  "C2","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["w", "play tone %d.noteJ2 beat %d.beats",			"BuzzerJ2",		  "C4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
//		["w", "play tone %d.noteJ3 beat %d.beats",			"BuzzerJ3",		  "C6","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],

		["R", "Sensor %d.sensor average %n times",			"getAnalogAve",		1,4,		{"remote":["B","S",	"S"],"func":"_getAdc1({0},{1})"}],
		["B", "SW %d.sw",									"getSW",			1,			{"remote":["B",		"B"],"func":"_getSw({0})"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",								"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",									"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",							"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"noteJ1":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3",],
		"noteJ2":["C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5",],
		"noteJ3":["C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"beats"		:["Half","Quarter","Eighth","Whole","Double"],

		"onoff"		:["On","Off"],
		"led"		:[1,2,3,4,5,6],
		"sensor"	:[1,2,3,4],
		"sw"		:[1,2,3],
	},
	"values":{
		"C2":65,"D2":73,"E2":82,"F2":87,"G2":98,"A2":110,"B2":123,
		"C3":131,"D3":147,"E3":165,"F3":175,"G3":196,"A3":220,"B3":247,
		"C4":262,"D4":294,"E4":330,"F4":349,"G4":392,"A4":440,"B4":494,
		"C5":523,"D5":587,"E5":659,"F5":698,"G5":784,"A5":880,"B5":988,
		"C6":1047,"D6":1175,"E6":1319,"F6":1397,"G6":1568,"A6":1760,"B6":1976,
		"C7":2093,"D7":2349,"E7":2637,"F7":2794,"G7":3136,"A7":3520,"B7":3951,
		"C8":4186,"D8":4699,
		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,

		"On":1,"Off":0,
	},
	"translators":{
		"ja":{
			"C2":"ド2", "D2":"レ2", "E2":"ミ2", "F2":"ファ2", "G2":"ソ2", "A2":"ラ2", "B2":"シ2",
			"C3":"ド3", "D3":"レ3", "E3":"ミ3", "F3":"ファ3", "G3":"ソ3", "A3":"ラ3", "B3":"シ3", 
			"C4":"ド4", "D4":"レ4", "E4":"ミ4", "F4":"ファ4", "G4":"ソ4", "A4":"ラ4", "B4":"シ4",
			"C5":"ド5", "D5":"レ5", "E5":"ミ5", "F5":"ファ5", "G5":"ソ5", "A5":"ラ5", "B5":"シ5", 
			"C6":"ド6", "D6":"レ6", "E6":"ミ6", "F6":"ファ6", "G6":"ソ6", "A6":"ラ6", "B6":"シ6",
			"C7":"ド7", "D7":"レ7", "E7":"ミ7", "F7":"ファ7", "G7":"ソ7", "A7":"ラ7", "B7":"シ7", "C8":"ド8", "D8":"レ8", 
			"Half":"2分音符", "Quarter":"4分音符", "Eighth":"8分音符", "Whole":"全音符", "Double":"倍全音符",

			"set LED %d.led %d.onoff"				:"LED %d.led を %d.onoff",
			"play tone %d.noteJ1 beat %d.beats"		:"%d.noteJ1 を %d.beats 鳴らす",
			"play tone %d.noteJ2 beat %d.beats"		:"%d.noteJ2 を %d.beats 鳴らす",
			"play tone %d.noteJ3 beat %d.beats"		:"%d.noteJ3 を %d.beats 鳴らす",
			"Sensor %d.sensor average %n times"		:"センサ %d.sensor の %n 回平均",
			"SW %d.sw"								:"スイッチ %d.sw",
		}
	}
}
