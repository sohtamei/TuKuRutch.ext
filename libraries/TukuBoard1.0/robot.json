{
	"name"			: "TukuBoard1.0",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 10,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "http://sohta02.web.fc2.com/familyday_orgel.html",
	"productInfoURL": "http://sohta02.web.fc2.com/familyday_orgel.html",
	"sampleDir"		: "sample/TukuBoard1.0",							// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_921600"],

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"TukuBoard1.0\"
#include \"TukurutchEsp.h\"
#include \"driver/adc.h\"
#include \"esp_adc_cal.h\"
WifiRemote remote;


#include <libb64/cdecode.h>
#include <libb64/cencode.h>
#include <WebServer.h>
WebServer webServer(80);
#define ENABLE_WEBSERVER

#define P_LED		2
#define P_GND		4
#define P_BUZZER	19

esp_adc_cal_characteristics_t adc_chars;

#define LEDC_CHANNEL_0     0
#define LEDC_TIMER_13_BIT  13
#define LEDC_BASE_FREQ     5000

enum {
  T_C4=262, T_D4=294, T_E4=330, T_F4=349, T_G4=392, T_A4=440, T_B4=494,
  T_C5=523, T_D5=587, T_E5=659, T_F5=698,
};

struct port {uint8_t sig; uint8_t gnd;};

void _tone(int sound, int ms) {
  ledcWriteTone(LEDC_CHANNEL_0, sound);
  delay(ms);
  ledcWriteTone(LEDC_CHANNEL_0, 0);
}

const uint8_t sensorTable[4] = {7, 6, 0, 3};
uint16_t _getAnalog(uint8_t idx, uint16_t count)
{
  if(!idx || idx > sizeof(sensorTable)/sizeof(sensorTable[0])) return 0;
  idx--;

  if(count == 0) count = 1;
  uint32_t sum = 0;
  for(int i = 0; i < count; i++)
    sum += adc1_get_raw((adc1_channel_t)sensorTable[idx]);
  return esp_adc_cal_raw_to_voltage(sum/count, &adc_chars);
}

const struct port ledTable[6] = {{2,0}, {26,25}, {17,16}, {27,14}, {12,13}, {5,23}};
void _setLed(uint8_t idx, uint8_t onoff)
{
  if(!idx || idx > sizeof(ledTable)/sizeof(ledTable[0])) return;
  idx--;

  digitalWrite(ledTable[idx].sig, onoff);
  pinMode(ledTable[idx].sig, OUTPUT);
  if(ledTable[idx].gnd) {
    digitalWrite(ledTable[idx].gnd, LOW);
    pinMode(ledTable[idx].gnd, OUTPUT);
  }
}

const struct port swTable[3] = {{26,17},{16,14},{12,5}};
uint8_t _getSw(uint8_t idx)
{
  if(!idx || idx > sizeof(swTable)/sizeof(swTable[0])) return 0;
  idx--;

  pinMode(swTable[idx].sig, INPUT_PULLUP);
  digitalWrite(swTable[idx].gnd, LOW);
  pinMode(swTable[idx].gnd, OUTPUT);
  return digitalRead(swTable[idx].sig) ? 0: 1;
}

void onConnect(String ip)
{
  digitalWrite(P_LED, HIGH);
  _tone(T_C4, 250);
  _tone(T_D4, 250);
  _tone(T_E4, 250);

  void startWebServer(void);
  startWebServer();
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
pinMode(P_LED, OUTPUT);
digitalWrite(P_LED, LOW);
pinMode(P_GND, OUTPUT);
digitalWrite(P_GND, LOW);
ledcSetup(LEDC_CHANNEL_0, LEDC_BASE_FREQ, LEDC_TIMER_13_BIT);
ledcAttachPin(P_BUZZER, LEDC_CHANNEL_0);

#define DEFAULT_VREF    1100
adc1_config_width(ADC_WIDTH_BIT_12);
esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, DEFAULT_VREF, &adc_chars);
for(int i=0; i<sizeof(sensorTable); i++)
  adc1_config_channel_atten((adc1_channel_t)sensorTable[i], ADC_ATTEN_DB_11);

_tone(T_C5, 100);
Serial.begin(115200);
#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
webServer.handleClient();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                                   | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+---------------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",								"runArduino",					{}],	// 変更禁止

		["w", "set LED %d.led %d.onoff",					"setLEDn",			1,"On",		{"remote":["B","B"],	"func":"_setLed({0},{1});"}],

//		["w", "play tone on note %d.noteJ1 beat %d.beats",	"BuzzerJ1",		  "ド2","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["w", "play tone on note %d.noteJ2 beat %d.beats",	"BuzzerJ2",		  "ド4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
//		["w", "play tone on note %d.noteJ3 beat %d.beats",	"BuzzerJ3",		  "ド6","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],

//		["R", "Sendor %d.sensor",							"getAnalog",		1,			{"remote":["B",		"S"],"func":"_getAnalog({0},1)"}],
		["R", "Sensor %d.sensor average %n times",			"getAnalogAve",		1,4,		{"remote":["B","S",	"S"],"func":"_getAnalog({0},{1})"}],
		["B", "SW %d.sw",									"getSW",			1,			{"remote":["B",		"B"],"func":"_getSw({0})"}],

		["-"],

//		["w", "set digital pin %d.d_port output as %d.digital","setDigital",	2,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
//		["B", "read digital pin %d.d_port",					"getDigital",		9,			{"remote":["B",		"B"],"func":"pinMode({0},INPUT_PULLUP),digitalRead({0})"}],
//		["B", "read digital pin %d.d_port (pull down)",		"getDigitalPD",		9,			{"remote":["B",		"B"],"func":"pinMode({0},INPUT_PULLDOWN),digitalRead({0})"}],

		// WiFi設定
		["R", "status WIFI",								"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",									"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",							"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"noteJ1":["ド2","レ2","ミ2","ファ2","ソ2","ラ2","シ2","ド3","レ3","ミ3","ファ3","ソ3","ラ3","シ3",],
		"noteJ2":["ド4","レ4","ミ4","ファ4","ソ4","ラ4","シ4","ド5","レ5","ミ5","ファ5","ソ5","ラ5","シ5",],
		"noteJ3":["ド6","レ6","ミ6","ファ6","ソ6","ラ6","シ6","ド7","レ7","ミ7","ファ7","ソ7","ラ7","シ7","ド8","レ8"],

		"beats"		:["Half","Quarter","Eighth","Whole","Double"],
		"digital"	:["HIGH","LOW"],
		"onoff"		:["On","Off"],
		"led"		:[1,2,3,4,5,6],
		"sensor"	:[1,2,3,4],
		"sw"		:[1,2,3],
	},
	"values":{
		"ド2":65,"レ2":73,"ミ2":82,"ファ2":87,"ソ2":98,"ラ2":110,"シ2":123,
		"ド3":131,"レ3":147,"ミ3":165,"ファ3":175,"ソ3":196,"ラ3":220,"シ3":247,
		"ド4":262,"レ4":294,"ミ4":330,"ファ4":349,"ソ4":392,"ラ4":440,"シ4":494,
		"ド5":523,"レ5":587,"ミ5":659,"ファ5":698,"ソ5":784,"ラ5":880,"シ5":988,
		"ド6":1047,"レ6":1175,"ミ6":1319,"ファ6":1397,"ソ6":1568,"ラ6":1760,"シ6":1976,
		"ド7":2093,"レ7":2349,"ミ7":2637,"ファ7":2794,"ソ7":3136,"ラ7":3520,"シ7":3951,
		"ド8":4186,"レ8":4699,

		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
	},
	"translators":{
		"ja":{
			"Half":"2分音符", "Quarter":"4分音符", "Eighth":"8分音符", "Whole":"全音符", "Double":"倍全音符",

			"set LED %d.led %d.onoff"						:"LED %d.led を %d.onoff",
			"play tone on note %d.noteJ1 beat %d.beats"		:"%d.noteJ1 を %d.beats 鳴らす",
			"play tone on note %d.noteJ2 beat %d.beats"		:"%d.noteJ2 を %d.beats 鳴らす",
			"play tone on note %d.noteJ3 beat %d.beats"		:"%d.noteJ3 を %d.beats 鳴らす",
		//	"set digital pin %d.d_port output as %d.digital":"デジタルピン %d.d_port の出力を %d.digital にする",
		//	"read digital pin %d.d_port"					:"デジタルピン %d.d_port",
			"read analog pin %d.a_port"						:"アナログピン %d.a_port",
			"Sensor %d.sensor average %n times"				:"センサ %d.sensor の %n 回平均",
			"SW %d.sw"										:"スイッチ %d.sw",
		}
	}
}
