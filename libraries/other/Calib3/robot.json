{
	"name"			: "Calib3",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 50,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "",
	"productInfoURL": "",
	"sampleDir"		: "Sample/Calib",							// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex (option)
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_1500000"],


	// C言語記述注意 : " を使うときは \" とすること

	// ヘッダ (C言語)
	"header":"
#define mVersion \"Calib1.0\"

#include <M5Atom.h>
#include <HTTPClient.h>
#include <libb64/cencode.h>
#include <libb64/cdecode.h>
#include <Preferences.h>
#include \"TukurutchEsp.h\"


WebsocketsServer wsServer;
static Preferences preferencesRobot;

#define numof(a) (sizeof(a)/sizeof((a)[0]))

uint32_t last_enc[2] = {0,0};
int32_t duration[2] = {0,0};
uint8_t cnt[2] = {0,0};
#define CNT_MAX		10

#define P_ENC0A		22
#define P_ENC0B		19
#define P_ENC1A		23
#define P_ENC1B		33
#define P_LED		21

#if 1
// ATOM
#define P_SRV0		32
#define P_SRV1		26
#else
// M5CAMERA
#define P_SRV0		13
#define P_SRV1		4
#endif

enum {
  CAL0P = 0,
  CAL0M,
  CAL1P,
  CAL1M,
};

enum {
  PWM0,
  PWM25,
  PWM50,
  PWM75,
  PWM100,
};

struct calibrate {
  uint16_t id;
  uint16_t ver;
  uint16_t T;
  uint16_t _reserve;
  uint16_t pwm[4][4];
   int16_t maxOffset[2];
   int16_t speedMax[4];
} static cal;

static const struct calibrate calInit = {
  0,
  1,
  18,
  0,
  {{308,314,319,336},{297,292,287,270},{295,290,285,267},{309,315,320,339}},
  {0,0},
  {2000,-2000,2000,-2000},
};

enum {
  SERVO_IDLE,
  SERVO_STOP_REQ,
  SERVO_OFF_REQ,
};
static uint8_t servo_stt = 0;
static uint32_t servo_time = 0;

void _setLED(uint8_t onoff)
{
  digitalWrite(P_LED, !onoff);
}

uint8_t ledStatus = 0;
static void irq_int0(void)
{
  cnt[0]++;
  if(cnt[0] >= CNT_MAX) {
    cnt[0] = 0;

    uint32_t cur = micros();
    uint32_t d = (cur - last_enc[0]) & ~0x80000000;
    duration[0] = digitalRead(P_ENC0B) ? d: -d;
    last_enc[0] = cur;

    ledStatus ^= 1;
    _setLED(ledStatus);
  }
  attachInterrupt(digitalPinToInterrupt(P_ENC0A), irq_int0, FALLING);  // RISING
}

static void irq_int1(void)
{
  cnt[1]++;
  if(cnt[1] >= CNT_MAX) {
    cnt[1] = 0;

    uint32_t cur = micros();
    uint32_t d = (cur - last_enc[1]) & ~0x80000000;
    duration[1] = digitalRead(P_ENC1B) ? d: -d;
    last_enc[1] = cur;
  }
  attachInterrupt(digitalPinToInterrupt(P_ENC1A), irq_int1, FALLING);  // RISING
}

static int16_t _getSpeed(uint8_t index)
{
  int32_t ret = duration[index];
  if(!ret) return 0;
  duration[index] = 0;
  return (1000000000L/(50L/CNT_MAX))/ret;  // us -> m rps
//  return ret;
}

//////////////////////////////
#define PWM_MIN     143  
#define PWM_NEUTRAL 307
#define PWM_MAX     471
const struct {uint8_t ledc; uint8_t port;} servoTable[] = {{8,P_SRV0},{9,P_SRV1}};
void _setPwm(uint8_t idx, int16_t data)
{
  ledcAttachPin(servoTable[idx].port, servoTable[idx].ledc);
  ledcWrite(servoTable[idx].ledc, data);
}

static const uint16_t maxOffsetTbl[] = {164,83,70,63,58,54,51,48,45,43,41,40,38,37,35,34,33,32,31,30,29,28,27,26,26,25,24,24,23,22,22,21,21,20,19,19,18,18,17,17,16,16,16,15,15,14,14,14,13,13,12};

int16_t limitOffset(int16_t offset)
{
       if(offset >= (int) numof(maxOffsetTbl)) offset = numof(maxOffsetTbl)-1;
  else if(offset <= (int)-numof(maxOffsetTbl)) offset = -(numof(maxOffsetTbl)-1);
  return offset;
}

void _setMotor(int16_t left, int16_t right/* -4 ~ +4 */,
  int16_t calib,   /* -50(Left) ~ +50(right) */
  int16_t duration)
{
       if(left >  PWM100) left =  PWM100;
  else if(left < -PWM100) left = -PWM100;

       if(right >  PWM100) right =  PWM100;
  else if(right < -PWM100) right = -PWM100;

  uint16_t pwmL = 0;
  uint16_t pwmR = 0;
  int data = 0;
  int calib4 = (calib + ((calib>=0)?2:-2) )/4;
  switch(left) {
  case PWM100:
    data = limitOffset(cal.maxOffset[0] - calib*2);
    if(data >= 0)
      pwmL = cal.pwm[CAL0P][PWM0] + maxOffsetTbl[data];
    else
      pwmL = PWM_MAX;
    break;

  case -PWM100:
    data = limitOffset(cal.maxOffset[1] - calib*2);
    if(data >= 0)
      pwmL = cal.pwm[CAL0M][PWM0] - maxOffsetTbl[data];
    else
      pwmL = PWM_MIN;
    break;

  case PWM0:
    if(calib == 0)
      pwmL = (cal.pwm[CAL0P][PWM0] + cal.pwm[CAL0M][PWM0])/2;
    else if(calib > 0)
      pwmL = cal.pwm[CAL0P][PWM0] + calib4;
    else
      pwmL = cal.pwm[CAL0M][PWM0] + calib4;
    break;

  default:
    if(left >= 0)
      pwmL = cal.pwm[CAL0P][ left] + calib4;
    else
      pwmL = cal.pwm[CAL0M][-left] + calib4;
    break;
  }

  switch(right) {
  case PWM100:
    data = limitOffset(cal.maxOffset[0] - calib*2);
    if(data >= 0)
      pwmR = PWM_MIN;
    else
      pwmR = cal.pwm[CAL1P][PWM0] - maxOffsetTbl[-data];
    break;

  case -PWM100:
    data = limitOffset(cal.maxOffset[1] - calib*2);
    if(data >= 0)
      pwmR = PWM_MAX;
    else
      pwmR = cal.pwm[CAL1M][PWM0] + maxOffsetTbl[-data];
    break;

  case PWM0:
    if(calib == 0)
      pwmR = (cal.pwm[CAL1P][PWM0] + cal.pwm[CAL1M][PWM0])/2;
    else if(calib > 0)
      pwmR = cal.pwm[CAL1M][PWM0] + calib4;
    else
      pwmR = cal.pwm[CAL1P][PWM0] + calib4;
    break;

  default:
    if(right >= 0)
      pwmR = cal.pwm[CAL1P][ right] + calib4;
    else
      pwmR = cal.pwm[CAL1M][-right] + calib4;
    break;
  }
//Serial.printf(\"%d %d\\n\", pwmL, pwmR);
  _setPwm(0, pwmL);
  _setPwm(1, pwmR);

  if(duration) {
    servo_stt = SERVO_STOP_REQ;
    servo_time = millis() + duration;

  } else if(left == PWM0 && right == PWM0) {
    servo_stt = SERVO_OFF_REQ;
    servo_time = millis() + 2000;

  } else {
    servo_stt = SERVO_IDLE;
    servo_time = 0;
  }
}

void _stopServo(void)
{
  servo_stt = SERVO_IDLE;
  servo_time = 0;
  _setPwm(0, 0);
  _setPwm(1, 0);
}

enum {
  CMD_STOP = 0,
  CMD_FORWARD,
  CMD_LEFT,
  CMD_RIGHT,
  CMD_BACK,
  CMD_ROLL_LEFT,
  CMD_ROLL_RIGHT,
  CMD_CALIBRATION,
};

struct { int16_t L; int16_t R;} static const dir_table[7] = {
//  L   R
  { 0,  0},  // 0:STOP
  { 1,  1},  // 1:FORWARD
  { 0,  1},  // 2:LEFT
  { 1,  0},  // 3:RIGHT
  {-1, -1},  // 4:BACK
  {-1,  1},  // 5:ROLL_LEFT
  { 1, -1},  // 6:ROLL_RIGHT
             // 7:CALIBRATION
};

void _setCar(uint8_t direction, uint16_t speed, int16_t calib, int16_t duration)
{
  if(direction >= CMD_CALIBRATION) {
    _setPwm(0, PWM_NEUTRAL);
    _setPwm(1, PWM_NEUTRAL);
  } else {
    _setMotor(speed*dir_table[direction].L, speed*dir_table[direction].R, calib, duration);
  }
}

/////////////////////////////////////////////

static char* _downloadCal(int16_t id, char* base64)
{
  if(base64 && base64[0]) {
    int len = base64_decode_chars(base64, strlen(base64), strBuf);
    if(len == sizeof(cal)) {
      memcpy((char*)&cal, strBuf, len);
      preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
      snprintf(strBuf, sizeof(strBuf), \"OK\");
    } else {
      snprintf(strBuf, sizeof(strBuf), \"Error\");
    }
    return strBuf;
  }

  char url[50];
  if(id==0) id=cal.id;
  snprintf(url, sizeof(url), \"http://sohta02.web.fc2.com/calib/M5CC%04d.txt\", id);
  memset(strBuf, 0, sizeof(strBuf));
  HTTPClient http;
  http.begin(url);
  int httpCode = http.GET();
  if(httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println(payload);
    if(base64_decode_expected_len(payload.length()) >= sizeof(strBuf)) goto Error;

    int len = base64_decode_chars((const char*)payload.c_str(), payload.length(), strBuf);
    if(len != sizeof(cal)) goto Error;
    memcpy((char*)&cal, strBuf, len);
    preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));

    uint16_t i;
    for(i=0; i<len; i++) Serial.printf(\"%02x\", ((uint8_t*)&cal)[i]);
    Serial.println();
    snprintf(strBuf, sizeof(strBuf), \"OK:%s\", payload.c_str());
  } else {
    Serial.printf(\"[HTTP] GET... failed, error: %s\\n\", http.errorToString(httpCode).c_str());
Error:
    snprintf(strBuf, sizeof(strBuf), \"Error\");
  }
  http.end();
  return strBuf;
}

char* _getCal(void)
{
  base64_encode_chars((char*)&cal, sizeof(cal), strBuf);
  return strBuf;
}

void _setCID(int16_t id, int16_t ver, int16_t T)
{
  cal.id = id;
  cal.ver = ver;
  cal.T = T;
  preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
}

void _setCPwm(uint8_t index, int16_t pwm0, int16_t pwm1, int16_t pwm2, int16_t pwm3)
{
  cal.pwm[index][0] = pwm0;
  cal.pwm[index][1] = pwm1;
  cal.pwm[index][2] = pwm2;
  cal.pwm[index][3] = pwm3;
  preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
}

void _setCMaxOffset(int16_t maxOffset0, int16_t maxOffset1)
{
  cal.maxOffset[0] = maxOffset0;
  cal.maxOffset[1] = maxOffset1;
  preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
}

void _setCSpeedMax(int16_t speedMax0P, int16_t speedMax0M, int16_t speedMax1P, int16_t speedMax1M)
{
  cal.speedMax[0] = speedMax0P;
  cal.speedMax[1] = speedMax0M;
  cal.speedMax[2] = speedMax1P;
  cal.speedMax[3] = speedMax1M;
  preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
}

void onConnect(String ip)
{
  _setLED(1);

  wsServer.listen(PORT_WEBSOCKET);
  Serial.println(ip);
}
",
	// setup処理 (C言語)
	"setup":"
_setLED(0);

Serial.begin(115200);

pinMode(P_ENC0A, INPUT);
pinMode(P_ENC0B, INPUT);
attachInterrupt(digitalPinToInterrupt(P_ENC0A), irq_int0, FALLING);
pinMode(P_ENC1A, INPUT);
pinMode(P_ENC1B, INPUT);
attachInterrupt(digitalPinToInterrupt(P_ENC1A), irq_int1, FALLING);

// ServoCar
ledcSetup(servoTable[0].ledc, 50/*Hz*/, 12/*bit*/);
ledcSetup(servoTable[1].ledc, 50/*Hz*/, 12/*bit*/);

initWifi(mVersion, false, onConnect);

preferencesRobot.begin(\"M5CameraCar\", false);
if(preferencesRobot.getBytes(\"calib\", &cal, sizeof(cal)) < sizeof(cal)) {
  Serial.println(\"init calib\");
  //memset(&cal, 0, sizeof(cal));
  memcpy(&cal, &calInit, sizeof(cal));
  preferencesRobot.putBytes(\"calib\", &cal, sizeof(cal));
} else {
  Serial.println(cal.id);
  Serial.println(cal.ver);
  for(uint8_t i=0; i<4; i++)
    Serial.printf(\"%d %d %d %d %d %d\\n\", cal.pwm[i][0], cal.pwm[i][1], cal.pwm[i][2], cal.pwm[i][3], cal.speedMax[i]);
  Serial.printf(\"%d %d\\n\", cal.maxOffset[0], cal.maxOffset[1]);
}
",
	// loop処理 (C言語)
	"loop":"
  loopWebSocket();
  if(servo_stt) {
    int32_t d = servo_time - millis();
    if(d <= 0) {
      switch(servo_stt) {
      case SERVO_STOP_REQ:
        servo_stt = SERVO_OFF_REQ;
        servo_time = millis() + 2000;
        _setPwm(0, (cal.pwm[CAL0P][PWM0] + cal.pwm[CAL0M][PWM0])/2);
        _setPwm(1, (cal.pwm[CAL1P][PWM0] + cal.pwm[CAL1M][PWM0])/2);
        break;

      case SERVO_OFF_REQ:
      default:
        servo_stt = SERVO_IDLE;
        servo_time = 0;
        _setPwm(0, 0);
        _setPwm(1, 0);
        break;
      }
    }
  }
",

	// スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["w", "%d.direction at speed %d.speed calib %d.calib duration %n",
														"setCar", "run forward",4,0,0,	{"remote":["B","S","S","S"],"func":"_setCar({0},{1},{2},{3});"}],
		["w", "set motor left %d.speed right %d.speed calib %d.calib duration %n",
														"setMotor",			4,4,0,0,	{"remote":["S","S","S","S"],"func":"_setMotor({0},{1},{2},{3});"}],
		["w", "set motor %d.servoch pwm %d.pwm",		"setPwm",			0,0,		{"remote":["B","S"],		"func":"_setPwm({0},{1});"}],
		["w", "stop",									"stopCar",						{"remote":[],				"func":"_stopServo();"}],

		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",					"func":"{0}"}],

//		["w", "set LED %d.servoch",						"setLED",			1,			{"remote":["B"],			"func":"pinMode(P_LED,OUTPUT);digitalWrite(P_LED,{0});"}],
		["R", "get speed %n",							"getSpeed",			0,			{"remote":["B",		"S"],	"func":"_getSpeed({0})"}],

		["w", "set ID %n ver %n T %n",					"setCID",			0,1,18,		{"remote":["S","S","S"],	"func":"_setCID({0},{1},{2});"}],
		["w", "set id-%n pwm-%n %n %n %n",				"setCPwm",			0,0,0,0,0,	{"remote":["B","S","S","S","S"],"func":"_setCPwm({0},{1},{2},{3},{4});"}],
		["w", "set maxOffset 0-%n 1-%n",				"setCMaxOffset",	0,0,		{"remote":["S","S"],		"func":"_setCMaxOffset({0},{1});"}],
		["w", "set speedMax 0P-%n 0M-%n 1P-%n 1M-%n",	"setCSpeedMax",		0,0,0,0,	{"remote":["S","S","S","S"],"func":"_setCSpeedMax({0},{1},{2},{3});"}],

		["R", "download calibration %n %s",				"downloadCal",		1,"",		{"remote":["S","s",	"s"],	"func":"_downloadCal({0},{1})"}],
		["R", "get cal",								"getCal",						{"remote":[			"s"],	"func":"_getCal()"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right","calibration"],
		"servoch"	:[0,1],
		"speed"		:[4,2,0,-2,-4],
		"pwm"		:[471,307,143,0],
		"calib"		:[50,25,0,-25,-50],
	},
	"values":{
		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,"calibration":7,
	},
	"translators":{
		"ja":{
			"stop":"ストップ", "run forward":"前", "turn left":"左", "turn right":"右", "run backward":"後", "rotate left":"左旋回", "rotate right":"右旋回", "calibration":"原点調整",
		}
	}
}
