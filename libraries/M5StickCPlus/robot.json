{
	"name"			: "M5StickCPlus",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 12,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "https://github.com/sohtamei/docs/blob/master/M5.md",
	"productInfoURL": "https://github.com/sohtamei/docs/blob/master/M5.md",
	"sampleDir"		: "sample/M5Series",						// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_750000"],

	"scratch3ext"	: "M5Series",								// scratch3 ext名[,SupportCamera]
	"scratch3burn"	: [
			{"name":"M5StickC", "type":"esp32", "baudrate":115200, "binPath":"M5StickC"},
			{"name":"M5StickCPlus", "type":"esp32", "baudrate":115200, "binPath":"M5StickCPlus"},
			{"name":"M5Stack", "type":"esp32", "baudrate":230400, "binPath":"M5Stack"},
			{"name":"Duke32AIO", "type":"esp32", "baudrate":230400, "binPath":"Duke32AIO"},
			{"name":"M5Atom", "type":"esp32", "baudrate":115200, "binPath":"M5Atom"},
	],

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
//#define _M5StickC
#define _M5StickCPlus

#ifdef _M5StickC
  #define mVersion \"M5StickC 1.0\"
  #include <M5StickC.h>
#else 
  #define mVersion \"M5StickCP 1.0\"
  #include <M5StickCPlus.h>
#endif

#include \"TukurutchEsp.h\"


WebsocketsServer wsServer;

#define ROVER_ADDRESS	0X38
#define P_LED			10

#define numof(a) (sizeof(a)/sizeof((a)[0]))

void _setLED(uint8_t onoff)
{
  digitalWrite(P_LED, !onoff);
  pinMode(P_LED, OUTPUT);
}

uint8_t _getSw(uint8_t button)
{
  switch(button) {
  case 0: return M5.BtnA.isPressed();
  case 1: return M5.BtnB.isPressed();
//case 2: return M5.BtnC.isPressed();
  }
  return 0;
}

float getIMU(uint8_t index)
{
  float data[3]={0};
  if(index < 3) {
    M5.IMU.getGyroData(data+0,data+1,data+2);
    return data[index-0];
  } else if(index < 6) {
    M5.IMU.getAccelData(data+0,data+1,data+2);
    return data[index-3];
  } else if(index < 9) {
    //M5.IMU.getAhrsData(data+0,data+1,data+2);
    return data[index-6];
  } else {
    M5.IMU.getTempData(data+0);
    return data[0];
  }
}

void _tone(int sound, int ms)
{
#ifdef _M5StickCPlus
  M5.Beep.tone(sound, ms);
  delay(ms);
  M5.Beep.mute();
#else
  delay(ms);
#endif
}

void _beep(void)
{
#ifdef _M5StickCPlus
  M5.Beep.beep();
  delay(100);
  M5.Beep.mute();
#endif
}

// ServoCar

const struct {uint8_t ledc; uint8_t port;} servoTable[] = {{8,33},{9,32}};
void _setServo(uint8_t idx, int16_t data/*normal:0~180, continuous:-100~+100*/, uint8_t continuous)
{
  if(idx >= numof(servoTable)) return;

  uint16_t pwmWidth;
  if(continuous) {
    #define srvZero 307		// 1.5ms/20ms*4096 = 307.2
    #define srvCoef 163		// (2.3ms-1.5ms)/20ms*4096 = 163.8
    if(data < -100) data = -100;
    else if(data > 100) data = 100;
    if(idx == 1) data = -data;
    pwmWidth = (data * srvCoef) / 100 + srvZero;
    if(data==0 && continuous!=2) pwmWidth=0;
  } else {
    #define srvMin 103		// 0.5ms/20ms*4096 = 102.4 (-90c)
    #define srvMax 491		// 2.4ms/20ms*4096 = 491.5 (+90c)
    if(data < 0) data = 0;
    else if(data > 180) data = 180;
    pwmWidth = (data * (srvMax - srvMin)) / 180 + srvMin;
  }
  ledcAttachPin(servoTable[idx].port, servoTable[idx].ledc);
  ledcWrite(servoTable[idx].ledc, pwmWidth);
}

struct { int16_t L; int16_t R;} static const dir_table[7] = {
//  L   R
  { 0,  0},  // 0:STOP
  { 1,  1},  // 1:FORWARD
  { 0,  1},  // 2:LEFT
  { 1,  0},  // 3:RIGHT
  {-1, -1},  // 4:BACK
  {-1,  1},  // 5:ROLL_LEFT
  { 1, -1},  // 6:ROLL_RIGHT
             // 7:CALIBRATION
};

void _setCar(uint8_t direction, uint8_t speed)
{
  if(direction >= numof(dir_table)) {
    _setServo(0, 0, 2);
    _setServo(1, 0, 2);
  } else {
    _setServo(0, speed * dir_table[direction].L, 1);
    _setServo(1, speed * dir_table[direction].R, 1);
  }
}

// Rover C

void RoverC_Init(void)    
{
  Wire.begin(0,26,100);		//sda 0, scl 26
}

void Send_iic(uint8_t Register, int16_t Speed)
{
  if(Speed >  100) Speed =  100;
  if(Speed < -100) Speed = -100;
  Wire.beginTransmission(ROVER_ADDRESS);
  Wire.write(Register);
  Wire.write(Speed);
  Wire.endTransmission();
}

uint8_t roverCInitF = false;
void setRoverC(int16_t F_L, int16_t F_R, int16_t R_L, int16_t R_R)
{
  if(!roverCInitF) {
    roverCInitF=true;
    RoverC_Init();
  }
  Send_iic(0x00, F_L);
  Send_iic(0x01, F_R);
  Send_iic(0x02, R_L);
  Send_iic(0x03, R_R);
}

void setRoverC_XYR(int16_t x, int16_t y, int16_t role)
{
  int16_t left = y+x;
  int16_t right = y-x;
  int16_t invK = 100;

  if(abs(left) > 100) invK = abs(left);
  else if(abs(right) > 100) invK = abs(right);

  if(invK != 100) {
    left  = (left*100)/invK;
    right = (right*100)/invK;
  }
  setRoverC(left+role, right-role, right+role, left-role);
}

struct { int8_t x; int8_t y; int8_t r; } const rdir_table[] = {
//  X  Y  R
  { 0, 0, 0},  // STOP
  { 1, 1, 0},  // UP_R
  { 0, 1, 0},  // UP
  {-1, 1, 0},  // UP_L
  { 1, 0, 0},  // RIGHT
  {-1, 0, 0},  // LEFT
  { 1,-1, 0},  // DOWN_R
  { 0,-1, 0},  // DOWN
  {-1,-1, 0},  // DOWN_L
  { 0, 0, 1},  // ROLL_R
  { 0, 0,-1},  // ROLL_L
};

void moveRoverC(uint8_t dir, uint8_t speed)
{
  if(dir >= sizeof(rdir_table)/sizeof(rdir_table[0])) return;
  setRoverC_XYR(speed*rdir_table[dir].x, speed*rdir_table[dir].y, speed*rdir_table[dir].r);
}

void onConnect(String ip)
{
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setCursor(0,0);
  M5.Lcd.println(ip);
  wsServer.listen(PORT_WEBSOCKET);
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
M5.begin(true, true, true); // init lcd, power, serial
M5.IMU.Init();
M5.Lcd.setRotation(3);

M5.Lcd.fillScreen(BLACK);
M5.Lcd.setTextSize(2);

M5.Lcd.setCursor(0, 0);
if(_getSw(0)) {
  M5.Lcd.println(\"ESP SmartConfig\");
  WiFi.mode(WIFI_STA);
  WiFi.beginSmartConfig();
  while (!WiFi.smartConfigDone()) {
    delay(2000);
    _setLED(1);
    _tone(T_C5, 100);
    _setLED(0);
  }
} else {
  #ifdef PCMODE
    M5.Lcd.println(\"PC mode: \" mVersion);
  #else
    M5.Lcd.println(\"Arduino mode: \" mVersion);
  #endif
}

// ServoCar
ledcSetup(servoTable[0].ledc, 50/*Hz*/, 12/*bit*/);
ledcSetup(servoTable[1].ledc, 50/*Hz*/, 12/*bit*/);

//RoverC_Init();
Serial.begin(115200);
#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
  loopWebSocket();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
  M5.update();  // update button and speaker
//delay(50);
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["-"],	// ブロック区切り

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"_setLED({0});"}],
		["R", "get IMU %d.imu",							"getIMU",			"AccelX",	{"remote":["B","F"],	"func":"getIMU({0})"}],
		["w", "play tone on note %d.note beat %d.beats","Buzzer",	 	 "C4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["w", "Beep",									"Beep",							{"remote":[],			"func":"_beep();"}],
		["B", "%d.button is pressed",					"getSw",			"buttonA",	{"remote":["B","B"],	"func":"_getSw({0})"}],
		["w", "set digital pin %n output as %d.digital","setDigital",		26,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		26,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],
		["R", "read analog pin %n average %n times",	"getAnalog",		36,4,		{"remote":["B","S",	"S"], "func":"getAdc1({0},{1})"}],

		["-"],

		["w", "set text %d.color size=%n",				"setText",			"WHITE", 2,	{"remote":["S","B"],	"func":"M5.Lcd.setTextColor({0});M5.Lcd.setTextSize({1});"}],
		["w", "set cursor at (%n ,%n )",				"setCursor",		0,0,		{"remote":["S","S"],	"func":"M5.Lcd.setCursor({0},{1});"}],
		["w", "print text %s",							"printText",		"test",		{"remote":["s"],		"func":"M5.Lcd.print({0});"}],
		["w", "print text %s and return",				"printlnText",		"test",		{"remote":["s"],		"func":"M5.Lcd.println({0});"}],
		["w", "draw text %s (%n ,%n ) font=%d.font",	"drawString","test",0,0,"Ascii16",{"remote":["s","S","S","B"],"func":"M5.Lcd.drawString({0},{1},{2},{3});"}],
		["w", "fill screen with %d.color",				"fillScreen",		"BLACK",	{"remote":["S"],		"func":"M5.Lcd.fillScreen({0}); M5.Lcd.setCursor(0,0);"}],

		["-"],

		["w", "--- ServoCar ---",						"tagServo",						{"enum":"",					"func":"0"}],
		["w", "%d.direction at speed %n",				"setCar",  "run forward",100,	{"remote":["B","B"],	"func":"_setCar({0},{1});"}],
		["w", "set motor %d.servoch speed %d.speed",	"setMotor",			0,100,		{"remote":["B","S"],	"func":"_setServo({0},{1},1);"}],
		["w", "stop",									"stopCar",						{"remote":[],			"func":"_setCar(0,0);"}],
		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",				"func":"{0}"}],
		["w", "set servo %d.servoch %d.angle",			"setServo",			0,90,		{"remote":["B","B"],	"func":"_setServo({0},{1},0);"}],
	//	["w", "stop servo %d.servoch",					"stopServo",		0,			{"remote":["B"],		"func":"_setServo({0},0,1);"}],

		["-"],

		["w", "--- RoverC ---",							"tagRover",						{"enum":"",					"func":"0"}],
		["w", "FL %n FR %n RL %n RR %n",				"setRoverC",	0,0,0,0,		{"remote":["S","S","S","S"],"func":"setRoverC({0},{1},{2},{3});"}],
		["w", "x %n y %n role %n",						"setRoverC_XYR",0,0,0,			{"remote":["S","S","S"],	"func":"setRoverC_XYR({0},{1},{2});"}],
		["w", "dir %d.roverDir speed %n",				"moveRoverC",	"UP",100,		{"remote":["B","B"],		"func":"moveRoverC({0},{1});"}],
		["R", "%d.roverDir .",							"enumRoverDir","UP",			{"enum":"",					"func":"{0}"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"button":["buttonA","buttonB","buttonC"],
		"color":["BLACK","NAVY","DARKGREEN","DARKCYAN","MAROON","PURPLE","OLIVE","LIGHTGREY","DARKGREY","BLUE","GREEN","CYAN","RED","MAGENTA","YELLOW","WHITE","ORANGE","GREENYELLOW","PINK"],
		"imu":["GyroX","GyroY","GyroZ","AccelX","AccelY","AccelZ","Pitch","Roll","Yaw","Temp"],

		"font":["Ascii8","Ascii16","Ascii26","Num48","7Seg48","Num75"],

		"note":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3",
				"C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5",
				"C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"beats":["Half","Quarter","Eighth","Whole","Double"],

		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right","calibration"],
		"servoch"	:[0,1],
		"speed"		:[100,50,0,-50,-100],
		"angle"		:[0,90,180],
		"roverDir"	:["STOP","UP_R","UP","UP_L","RIGHT","LEFT","DOWN_R","DOWN","DOWN_L","ROLL_R","ROLL_L"],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"buttonA":0,"buttonB":1,"buttonC":2,
		"BLACK":0x0000,"NAVY":0x000F,"DARKGREEN":0x03E0,"DARKCYAN":0x03EF,"MAROON":0x7800,"PURPLE":0x780F,"OLIVE":0x7BE0,"LIGHTGREY":0xC618,"DARKGREY":0x7BEF,"BLUE":0x001F,"GREEN":0x07E0,"CYAN":0x07FF,"RED":0xF800,"MAGENTA":0xF81F,"YELLOW":0xFFE0,"WHITE":0xFFFF,"ORANGE":0xFD20,"GREENYELLOW":0xAFE5,"PINK":0xF81F,
		"GyroX":0,"GyroY":1,"GyroZ":2,"AccelX":3,"AccelY":4,"AccelZ":5,"Pitch":6,"Roll":7,"Yaw":8,"Temp":9,

		"Ascii8":1,"Ascii16":2,"Ascii26":4,"Num48":6,"7Seg48":7,"Num75":8,

		"C2":65,"D2":73,"E2":82,"F2":87,"G2":98,"A2":110,"B2":123,
		"C3":131,"D3":147,"E3":165,"F3":175,"G3":196,"A3":220,"B3":247,
		"C4":262,"D4":294,"E4":330,"F4":349,"G4":392,"A4":440,"B4":494,
		"C5":523,"D5":587,"E5":659,"F5":698,"G5":784,"A5":880,"B5":988,
		"C6":1047,"D6":1175,"E6":1319,"F6":1397,"G6":1568,"A6":1760,"B6":1976,
		"C7":2093,"D7":2349,"E7":2637,"F7":2794,"G7":3136,"A7":3520,"B7":3951,
		"C8":4186,"D8":4699,

		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,

		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,"calibration":7,
		"STOP":0,"UP_R":1,"UP":2,"UP_L":3,"RIGHT":4,"LEFT":5,"DOWN_R":6,"DOWN":7,"DOWN_L":8,"ROLL_R":9,"ROLL_L":10,
	},
	"translators":{
		"ja":{
			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read analog pin %n average %n times"			:"アナログピン %n の %n 回平均",
		}
	}
}
