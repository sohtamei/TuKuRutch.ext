{
	"name"			: "LiquidCrystal",
	"port"			: 0,										// 変更禁止
	"boardType"		: "arduino:avr:uno",						// package:platform:board

	"sort"			: 50,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "http://sohta02.web.fc2.com/familyday_shield.html#LiquidCrystal",
	"productInfoURL": "http://sohta02.web.fc2.com/familyday_shield.html#LiquidCrystal",
	"sampleDir"		: "",										// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "robot_normal/robot_normal",				// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"LiquidCrystal1.0\"

#include <LiquidCrystal.h>
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

static void execCmd(uint8_t cmd)
{
switch(cmd) {
case 0: lcd.noDisplay(); break;
case 1: lcd.display(); break;
case 2: lcd.noBlink(); break;
case 3: lcd.blink(); break;
case 4: lcd.noCursor(); break;
case 5: lcd.cursor(); break;
case 6: lcd.scrollDisplayLeft(); break;
case 7: lcd.scrollDisplayRight(); break;
case 8: lcd.leftToRight(); break;
case 9: lcd.rightToLeft(); break;
case 10: lcd.autoscroll(); break;
case 11: lcd.noAutoscroll(); break;
}
}

void lcdWriteN(char* buf, uint8_t n)
{
uint8_t i;
for(i = 0; i < n; i++)
lcd.write(buf[i]);
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
Serial.begin(115200);
lcd.begin(16, 2);		// cols rows
lcd.print(\"init\");
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["-"],	// ブロック区切り

		["w", "print LCD %s",							"setLCD",		"Hello, World!",{"remote":["s"],		"func":"lcd.print({0});"}],
		["w", "print LCD %s (hex)",						"setLCDhex",		"303132",	{"remote":["b"],		"func":"lcdWriteN({0});"}],
		["w", "print LCD %n",							"setLCDnum",		"123",		{"remote":["S"],		"func":"lcd.print({0});"}],
		["w", "set cursor %n %n",						"setCursor",		0,0,		{"remote":["B","B"],	"func":"lcd.setCursor({0},{1});"}],
		["w", "clear LCD",								"clearLCD",						{"remote":[],			"func":"lcd.clear();"}],
		["w", "home LCD",								"homeLCD",						{"remote":[],			"func":"lcd.home();"}],

		["w", "execute %d.cmd",							"execCmd",			"display",	{"remote":["B"],		"func":"execCmd({0});"}],

//	void createChar(uint8_t, uint8_t[]);
//	void command(uint8_t);

		["-"],

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"pinMode(13,OUTPUT);digitalWrite(13,{0});"}],
		["w", "set digital pin %n output as %d.digital","setDigital",		13,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["w", "set digital pin A%n output as %d.digital","setDigitalA",		0,"HIGH",	{"remote":["B","B"],	"func":"pinMode(A0+{0},OUTPUT);digitalWrite(A0+{0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		9,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],
		["B", "read digital pin A%n",					"getDigitalA",		0,			{"remote":["B",		"B"], "func":"pinMode(A0+{0},INPUT),digitalRead(A0+{0})"}],
		["R", "read analog pin A%n",					"getAnalog",		0,			{"remote":["B",		"S"], "func":"pinMode(A0+{0},INPUT),analogRead(A0+{0})"}],

		["-"],

	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"cmd":["noDisplay","display","noBlink","blink",
			"noCursor","cursor","scrollDisplayLeft","scrollDisplayRight",
			"leftToRight","rightToLeft","autoscroll","noAutoscroll"],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"noDisplay":0,"display":1,"noBlink":2,"blink":3,
		"noCursor":4,"cursor":5,"scrollDisplayLeft":6,"scrollDisplayRight":7,
		"leftToRight":8,"rightToLeft":9,"autoscroll":10,"noAutoscroll":11,
	},
	"translators":{
		"ja":{
			"set LED %d.onoff"								:"LEDを %d.onoff",
			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"set digital pin A%n output as %d.digital"		:"デジタルピン A%n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read digital pin A%n"							:"デジタルピン A%n",
			"read analog pin A%n"							:"アナログピン A%n",
		}
	}
}
