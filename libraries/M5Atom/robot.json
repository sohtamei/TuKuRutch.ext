{
	"name"			: "M5Atom",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:m5stack-core-esp32",			// package:platform:board

	"sort"			: 12,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "https://github.com/sohtamei/docs/blob/master/M5.md",
	"productInfoURL": "https://github.com/sohtamei/docs/blob/master/M5.md",
	"sampleDir"		: "sample/M5Series",						// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=m5stack-core-esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=m5stack-core-esp32_default",
						"custom_UploadSpeed=m5stack-core-esp32_115200"],


	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"M5Atom 1.0\"

#include <M5Atom.h>
#include \"TukurutchEsp.h\"


WebsocketsServer wsServer;

#define numof(a) (sizeof(a)/sizeof((a)[0]))

void _setLED(uint8_t onoff)
{
  if(onoff)
    M5.dis.drawpix(0,0xf00000);
  else
    M5.dis.clear();
}

uint8_t _getSw(uint8_t button)
{
  switch(button) {
  case 0: return M5.Btn.isPressed();
//case 1: return M5.BtnB.isPressed();
//case 2: return M5.BtnC.isPressed();
  }
  return 0;
}

float getIMU(uint8_t index)
{
  float data[3]={0};
  if(index < 3) {
    M5.IMU.getGyroData(data+0,data+1,data+2);
    return data[index-0];
  } else if(index < 6) {
    M5.IMU.getAccelData(data+0,data+1,data+2);
    return data[index-3];
  } else if(index < 9) {
    //M5.IMU.getAhrsData(data+0,data+1,data+2);
    return data[index-6];
  } else {
    M5.IMU.getTempData(data+0);
    return data[0];
  }
}

void _tone(int sound, int ms)
{
  delay(ms);
}

// ServoCar

const struct {uint8_t ledc; uint8_t port;} servoTable[] = {{8,32},{9,26}};
void _setServo(uint8_t idx, int16_t data/*normal:0~180, continuous:-100~+100*/, uint8_t continuous)
{
  if(idx >= numof(servoTable)) return;

  uint16_t pwmWidth;
  if(continuous) {
    #define srvZero 307		// 1.5ms/20ms*4096 = 307.2
    #define srvCoef 163		// (2.3ms-1.5ms)/20ms*4096 = 163.8
    if(data < -100) data = -100;
    else if(data > 100) data = 100;
    if(idx == 1) data = -data;
    pwmWidth = (data * srvCoef) / 100 + srvZero;
    if(data==0 && continuous!=2) pwmWidth=0;
  } else {
    #define srvMin 103		// 0.5ms/20ms*4096 = 102.4 (-90c)
    #define srvMax 491		// 2.4ms/20ms*4096 = 491.5 (+90c)
    if(data < 0) data = 0;
    else if(data > 180) data = 180;
    pwmWidth = (data * (srvMax - srvMin)) / 180 + srvMin;
  }
  ledcAttachPin(servoTable[idx].port, servoTable[idx].ledc);
  ledcWrite(servoTable[idx].ledc, pwmWidth);
}

struct { int16_t L; int16_t R;} static const dir_table[7] = {
//  L   R
  { 0,  0},  // 0:STOP
  { 1,  1},  // 1:FORWARD
  { 0,  1},  // 2:LEFT
  { 1,  0},  // 3:RIGHT
  {-1, -1},  // 4:BACK
  {-1,  1},  // 5:ROLL_LEFT
  { 1, -1},  // 6:ROLL_RIGHT
             // 7:CALIBRATION
};

void _setCar(uint8_t direction, uint8_t speed)
{
  if(direction >= numof(dir_table)) {
    _setServo(0, 0, 2);
    _setServo(1, 0, 2);
  } else {
    _setServo(0, speed * dir_table[direction].L, 1);
    _setServo(1, speed * dir_table[direction].R, 1);
  }
}

void onConnect(String ip)
{
  _setLED(1);

  wsServer.listen(PORT_WEBSOCKET);
  Serial.println(ip);
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
M5.begin(true, true, true); // init lcd, power, serial
M5.IMU.Init();
Serial.begin(115200);
if(_getSw(0)) {
  Serial.println(\"Waiting for SmartConfig.\");
  WiFi.mode(WIFI_STA);
  WiFi.beginSmartConfig();
  while (!WiFi.smartConfigDone()) {
    delay(2000);
    _setLED(1);
    _tone(T_C5, 100);
    _setLED(0);
  }
  Serial.println(\"SmartConfig received.\");
}

// ServoCar
ledcSetup(servoTable[0].ledc, 50/*Hz*/, 12/*bit*/);
ledcSetup(servoTable[1].ledc, 50/*Hz*/, 12/*bit*/);

#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
  loopWebSocket();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
  M5.update();  // update button and speaker
//delay(50);
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["-"],	// ブロック区切り

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"_setLED({0});"}],
		["R", "get IMU %d.imu",							"getIMU",			"AccelX",	{"remote":["B","F"],	"func":"getIMU({0})"}],
		["-"],//["w", "play tone on note %d.note beat %d.beats","Buzzer",	 	 "C4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["-"],//["w", "Beep",									"Beep",							{"remote":[],			"func":"_beep();"}],
		["B", "%d.button is pressed",					"getSw",			"buttonA",	{"remote":["B","B"],	"func":"_getSw({0})"}],
		["w", "set digital pin %n output as %d.digital","setDigital",		22,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		22,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],
		["R", "read analog pin %n average %n times",	"getAnalog",		33,4,		{"remote":["B","S",	"S"], "func":"getAdc1({0},{1})"}],

		["-"],

		["-"],//["w", "set text %d.color size=%n",				"setText",			"WHITE", 2,	{"remote":["S","B"],	"func":"M5.Lcd.setTextColor({0});M5.Lcd.setTextSize({1});"}],
		["-"],//["w", "set cursor at (%n ,%n )",				"setCursor",		0,0,		{"remote":["S","S"],	"func":"M5.Lcd.setCursor({0},{1});"}],
		["-"],//["w", "print text %s",							"printText",		"test",		{"remote":["s"],		"func":"M5.Lcd.print({0});"}],
		["-"],//["w", "print text %s and return",				"printlnText",		"test",		{"remote":["s"],		"func":"M5.Lcd.println({0});"}],
		["-"],//["w", "draw text %s (%n ,%n ) font=%d.font",	"drawString","test",0,0,"Ascii16",{"remote":["s","S","S","B"],"func":"M5.Lcd.drawString({0},{1},{2},{3});"}],
		["-"],//["w", "fill screen with %d.color",				"fillScreen",		"BLACK",	{"remote":["S"],		"func":"M5.Lcd.fillScreen({0}); M5.Lcd.setCursor(0,0);"}],

		["-"],

		["w", "--- ServoCar ---",						"tagServo",						{"enum":"",					"func":"0"}],
		["w", "%d.direction at speed %n",				"setCar",  "run forward",100,	{"remote":["B","B"],	"func":"_setCar({0},{1});"}],
		["w", "set motor %d.servoch speed %d.speed",	"setMotor",			0,100,		{"remote":["B","S"],	"func":"_setServo({0},{1},1);"}],
		["w", "stop",									"stopCar",						{"remote":[],			"func":"_setCar(0,0);"}],
		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",				"func":"{0}"}],
		["w", "set servo %d.servoch %d.angle",			"setServo",			0,90,		{"remote":["B","B"],	"func":"_setServo({0},{1},0);"}],
	//	["w", "stop servo %d.servoch",					"stopServo",		0,			{"remote":["B"],		"func":"_setServo({0},0,1);"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"button":["buttonA","buttonB","buttonC"],
		"imu":["GyroX","GyroY","GyroZ","AccelX","AccelY","AccelZ","Pitch","Roll","Yaw","Temp"],

		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right","calibration"],
		"servoch"	:[0,1],
		"speed"		:[100,50,0,-50,-100],
		"angle"		:[0,90,180],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"buttonA":0,"buttonB":1,"buttonC":2,
		"GyroX":0,"GyroY":1,"GyroZ":2,"AccelX":3,"AccelY":4,"AccelZ":5,"Pitch":6,"Roll":7,"Yaw":8,"Temp":9,

		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,"calibration":7,
	},
	"translators":{
		"ja":{
			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read analog pin %n average %n times"			:"アナログピン %n の %n 回平均",
		}
	}
}
