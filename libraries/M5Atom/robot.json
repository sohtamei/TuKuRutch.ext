{
	"name"			: "M5Atom",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 12,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "https://github.com/sohtamei/docs/blob/master/M5.md",
	"productInfoURL": "https://github.com/sohtamei/docs/blob/master/M5.md",
	"sampleDir"		: "sample/M5Series",						// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_1500000"],


	// C言語記述注意 : " を使うときは \" とすること

	// ヘッダ (C言語)
	"header":"
#define mVersion \"M5Atom 1.0\"

#include \"TukurutchEsp.h\"
#include \"main.h\"
",
	// setup処理 (C言語)
	"setup":"_setup(mVersion);",

	// loop処理 (C言語)
	"loop":"
  loopWebSocket();
  _loop();
",

	// スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["-"],	// ブロック区切り

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"_setLED({0});"}],
		["R", "get IMU %d.imu",							"getIMU",			"AccelX",	{"remote":["B","F"],	"func":"getIMU({0})"}],
		["-"],//["w", "play tone on note %d.note beat %d.beats","Buzzer",	 	 "C4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["-"],//["w", "Beep",									"Beep",							{"remote":[],			"func":"_beep();"}],
		["B", "%d.button is pressed",					"getSw",			"buttonA",	{"remote":["B","B"],	"func":"_getSw({0})"}],
		["w", "set digital pin %n output as %d.digital","setDigital",		22,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		22,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],
		["R", "read analog pin %n average %n times",	"getAnalog",		33,4,		{"remote":["B","S",	"S"], "func":"getAdc1({0},{1})"}],

		["-"],

		["-"],//["w", "set text %d.color size=%n",				"setText",			"WHITE", 2,	{"remote":["S","B"],	"func":"M5.Lcd.setTextColor({0});M5.Lcd.setTextSize({1});"}],
		["-"],//["w", "set cursor at (%n ,%n )",				"setCursor",		0,0,		{"remote":["S","S"],	"func":"M5.Lcd.setCursor({0},{1});"}],
		["-"],//["w", "print text %s",							"printText",		"test",		{"remote":["s"],		"func":"M5.Lcd.print({0});"}],
		["-"],//["w", "print text %s and return",				"printlnText",		"test",		{"remote":["s"],		"func":"M5.Lcd.println({0});"}],
		["-"],//["w", "draw text %s (%n ,%n ) font=%d.font",	"drawString","test",0,0,"Ascii16",{"remote":["s","S","S","B"],"func":"M5.Lcd.drawString({0},{1},{2},{3});"}],
		["-"],//["w", "fill screen with %d.color",				"fillScreen",		"BLACK",	{"remote":["S"],		"func":"M5.Lcd.fillScreen({0}); M5.Lcd.setCursor(0,0);"}],

		["-"],

		["w", "--- ServoCar ---",						"tagServo",						{"enum":"",					"func":"0"}],
		["w", "%d.direction at speed %n",				"setCar",  "run forward",100,	{"remote":["B","B"],	"func":"_setCar({0},{1});"}],
		["w", "set motor %d.servoch speed %d.speed",	"setMotor",			0,100,		{"remote":["B","S"],	"func":"_setServo({0},{1},1);"}],
		["w", "stop",									"stopCar",						{"remote":[],			"func":"_setCar(0,0);"}],
		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",				"func":"{0}"}],
		["w", "set servo %d.servoch %d.angle",			"setServo",			0,90,		{"remote":["B","B"],	"func":"_setServo({0},{1},0);"}],
	//	["w", "stop servo %d.servoch",					"stopServo",		0,			{"remote":["B"],		"func":"_setServo({0},0,1);"}],

		["-"],

		["-"],//["w", "--- RoverC ---",							"tagRover",						{"enum":"",					"func":"0"}],
		["-"],//["w", "FL %n FR %n RL %n RR %n",				"setRoverC",	0,0,0,0,		{"remote":["S","S","S","S"],"func":"setRoverC({0},{1},{2},{3});"}],
		["-"],//["w", "x %n y %n role %n",						"setRoverC_XYR",0,0,0,			{"remote":["S","S","S"],	"func":"setRoverC_XYR({0},{1},{2});"}],
		["-"],//["w", "dir %d.roverDir speed %n",				"moveRoverC",	"UP",100,		{"remote":["B","B"],		"func":"moveRoverC({0},{1});"}],
		["-"],//["R", "%d.roverDir .",							"enumRoverDir","UP",			{"enum":"",					"func":"{0}"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"button":["buttonA","buttonB","buttonC"],
		"imu":["GyroX","GyroY","GyroZ","AccelX","AccelY","AccelZ","Pitch","Roll","Yaw","Temp"],

		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right","calibration"],
		"servoch"	:[0,1],
		"speed"		:[100,50,0,-50,-100],
		"angle"		:[0,90,180],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"buttonA":0,"buttonB":1,"buttonC":2,
		"GyroX":0,"GyroY":1,"GyroZ":2,"AccelX":3,"AccelY":4,"AccelZ":5,"Pitch":6,"Roll":7,"Yaw":8,"Temp":9,

		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,"calibration":7,
	},
	"translators":{
		"ja":{
			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read analog pin %n average %n times"			:"アナログピン %n の %n 回平均",
		}
	}
}
