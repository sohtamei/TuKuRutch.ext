{
	"name"			: "QuadCrawler",
	"scratch3ext"	: "QuadCrawler",							// scratch3 ext名[,SupportCamera]
	"boardType"		: "arduino:avr:uno",						// package:platform:board

	"sort"			: 2,										// メニュー上の表示順序

	"scratch3burn"	: [											// binary定義
			{"name":"QuadCrawler", "type":"atmega328", "baudrate":115200, "binPath":"QuadCrawler"},
	],

	// C言語記述注意 : " を使うときは \" とすること

	// ヘッダ (C言語)
	"header":"
#define mVersion \"QuadCrawler1.6\"

#include \"quadCrawler.h\"
#include <analogRemote.h>

#define REMOTE_ENABLE	// for robot_pcmode.ino.template
static void funcLed(uint8_t onoff) { digitalWrite(P_LED, onoff); }
static analogRemote remote(MODE_XYKEYS_MERGE, /*port*/P_IRRX, funcLed);

const uint8_t sw_table[4] = {P_Sw1,P_Sw2,P_Sw3,P_Sw4};

#ifdef PCMODE
static uint8_t lastkey = 0;
static uint8_t originAdj = 0;
static uint8_t originAdjId;
static uint32_t sonner_time = 0;
extern volatile unsigned long timer0_millis;

static uint8_t lastSw4 = 1;
static int detect_sw4(void)
{
  int detect = 0;
  uint8_t sw4 = digitalRead(P_Sw4);
  if(lastSw4!=sw4 && sw4==0)
    detect = 1;
  lastSw4 = sw4;
  return detect;
}
#endif
",
	// setup処理 (C言語)
	"setup":"
Serial.begin(115200);
pinMode(P_LED, OUTPUT);
digitalWrite(P_LED, LOW);
quadCrawler_init();
remote.probe();
quadCrawler_colorWipe(COLOR_PURPLE);
quadCrawler_beep(100);
",
	// loop処理 (C言語)
	"loop":"
#ifdef PCMODE
if(comMode == MODE_INVALID) {
  if(originAdj) {
  //loop_originAdj();
    if(detect_sw4()) {
      quadCrawler_colorWipe(COLOR_PURPLE);
      quadCrawler_Walk(quadCrawler_fast, COM_STOP);
      originAdj = 0;
      return;
    } else if(originAdj && !quadCrawler_checkServoON()) {
      quadCrawler_colorWipe(COLOR_PURPLE);
      quadCrawler_beep(500);
      originAdj = 0;
      return;
    }

    remote.checkUpdated();            // リモコンコード受信
    uint8_t key = remote.keys;        // 受信したリモコンコード取得
    if(key != lastkey) {
      lastkey = key;
      int ret;
      switch(key) {
      case BUTTON_1: quadCrawler_colorRed(0); originAdjId = 1; break;
      case BUTTON_2: quadCrawler_colorRed(3); originAdjId = 3; break;
      case BUTTON_3: quadCrawler_colorRed(1); originAdjId = 2; break;
      case BUTTON_4: quadCrawler_colorRed(2); originAdjId = 4; break;
      }
      if(!originAdjId) return;

      switch(key) {
      case BUTTON_UP:
        ret = _calibServo((originAdjId-1)*2+0, CALIB_DEC);
        quadCrawler_beep((ret <= -30) ? 1000:50);
        break;

      case BUTTON_DOWN:
        ret = _calibServo((originAdjId-1)*2+0, CALIB_INC);
        quadCrawler_beep((ret >= 30) ? 1000:50);
        break;

      case BUTTON_LEFT:
        ret = _calibServo((originAdjId-1)*2+1, CALIB_DEC);
        quadCrawler_beep((ret <= -30) ? 1000:50);
        break;

      case BUTTON_RIGHT:
        ret = _calibServo((originAdjId-1)*2+1, CALIB_INC);
        quadCrawler_beep((ret >= 30) ? 1000:50);
        break;

      case BUTTON_CENTER:
        _calibServo((originAdjId-1)*2+0, CALIB_RESET);
        _calibServo((originAdjId-1)*2+1, CALIB_RESET);
        quadCrawler_beep(1000);
        break;
      }
    }
    return;
  }

  // SW4を押したとき初期姿勢にする (組み立て用)
  if(detect_sw4()) {
    int i;
    quadCrawler_colorWipe(COLOR_RED);
    for(i = 0; i < 4; i++)
      quadCrawler_setPose1(i, 0, 0);
    originAdj = 1;
    originAdjId = 0;
    return;
  }

  // リモコン処理：標準リモコン、アナログリモコンを受信し、キーコードに従ってロボットを動かす。
  #define A_DOWN_OFFSET  0x10
  remote.checkUpdated();            // リモコンコード受信
  uint8_t key = remote.keys;        // 受信したリモコンコード取得
  switch(key) {
  case BUTTON_A_XY:                 // アナログリモコン JOYSTICK操作のとき
    key = remote.xyKeys;
    break;
  case BUTTON_A_DOWN:
    key = remote.xyKeys + A_DOWN_OFFSET;  // アナログリモコン D ボタン押し
    delay(20);
    break;
  }

  if(key != lastkey) {
    lastkey = key;
    switch(key) {
    case BUTTON_POWER:
    case BUTTON_C:
    case BUTTON_B:
    case BUTTON_CENTER:
      break;
    case BUTTON_MENU:             // MENUボタン : ブザー3秒
      quadCrawler_beep(3000);
      break;
    case BUTTON_0:                // 0ボタン : LEDレインボー
      quadCrawler_beep(50);
      for (int n = 0; n < 5; n++) {
        quadCrawler_rainbow(5);
      }
      break;

    case XY_UP:                   // 上ボタン : 前進
    case BUTTON_UP:
      quadCrawler_colorWipe(COLOR_BLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_FW);
      break;
    case XY_LEFT:
    case BUTTON_LEFT:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_LEFT);
      break;
    case XY_RIGHT:
    case BUTTON_RIGHT:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_RIGHT);
      break;
    case XY_DOWN:
    case BUTTON_DOWN:
      quadCrawler_colorWipe(COLOR_RED);
      quadCrawler_Walk(quadCrawler_fast, COM_RW);
      break;
    case XY_UP_R:
    case XY_DOWN_L:
    case BUTTON_RETURN:
      quadCrawler_colorWipe(COLOR_GREEN);
      quadCrawler_Walk(quadCrawler_fast, COM_CW);
      break;
    case XY_UP_L:
    case XY_DOWN_R:
    case BUTTON_TEST:
      quadCrawler_colorWipe(COLOR_GREEN);
      quadCrawler_Walk(quadCrawler_fast, COM_CCW);
      break;

    case XY_UP_R + A_DOWN_OFFSET:
    case BUTTON_1:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_ALL_UP);
      break;
    case BUTTON_A_CENTER:
    case BUTTON_2:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_ALL_DOWN);
      break;
    case XY_DOWN + A_DOWN_OFFSET:
    case BUTTON_3:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_T_DOWN);
      break;
    case XY_UP + A_DOWN_OFFSET:
    case BUTTON_4:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_H_DOWN);
      break;
    case XY_LEFT + A_DOWN_OFFSET:
    case BUTTON_5:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_L_DOWN);
      break;
    case XY_RIGHT + A_DOWN_OFFSET:
    case BUTTON_6:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_R_DOWN);
      break;

    case BUTTON_A_UP:
    case BUTTON_7:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_T_UPDOWN);
      break;
    case BUTTON_A_LEFT:
    case BUTTON_8:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_L_R_UP);
      break;
    case BUTTON_A_RIGHT:
    case BUTTON_9:
      quadCrawler_colorWipe(COLOR_LIGHTBLUE);
      quadCrawler_Walk(quadCrawler_fast, COM_ALL_UPDOWN);
      break;
    default:                      // ボタンを離したとき : 停止
      quadCrawler_colorWipe(COLOR_PURPLE);
      quadCrawler_Walk(quadCrawler_fast, COM_STOP);
      break;
    }
  }

  // 歩行などのモーション処理、経過時間に応じてサーボモーターを制御する。
  if(remote.xyLevel >= 10) {
    // アナログリモコンのJOYSTICK操作のとき速度設定
    quadCrawler_setSpeed(25000 / remote.xyLevel, remote.x, remote.y);
  }

  uint16_t elapsed = (timer0_millis - sonner_time);
  if(elapsed >= 100) {
    sonner_time = timer0_millis;
    // 超音波センサで障害物を検出したときブザーを鳴らす (100ms周期)
    double sonner_val = quadCrawler_getSonner();
    if (sonner_val < 8){
      quadCrawler_beep(sonner_val * 10);

      if(lastkey == XY_UP || lastkey == BUTTON_UP) {
        quadCrawler_colorWipe(COLOR_PURPLE);
        quadCrawler_Walk(quadCrawler_fast, COM_STOP);
      }
    }
  }
}
#endif
quadCrawler_servoLoop();
",

	// スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["-"],					// dummy

		["w", "walk %d.walkcmd %d.speed",				"setWalk",			"fw","fast",{"remote":["B","S"],	"func":"quadCrawler_Walk({1},{0});"}],
		["w", "FrontR up/down %d.knee fw/back %d.crotchF","setPoseRF",		0,0,		{"remote":["S","S"],	"func":"quadCrawler_setPose1(0,{0},{1});"}],
		["w", "FrontL up/down %d.knee fw/back %d.crotchF","setPoseLF",		0,0,		{"remote":["S","S"],	"func":"quadCrawler_setPose1(2,{0},{1});"}],
		["w", "RearR  up/down %d.knee fw/back %d.crotchR","setPoseRR",		0,0,		{"remote":["S","S"],	"func":"quadCrawler_setPose1(1,{0},{1});"}],
		["w", "RearL  up/down %d.knee fw/back %d.crotchR","setPoseLR",		0,0,		{"remote":["S","S"],	"func":"quadCrawler_setPose1(3,{0},{1});"}],
		["w", "stop",									"setStop",						{"remote":[],			"func":"quadCrawler_Walk(200,0);"}],

		["R", "calib up/down %d.leg %d.calibK",			"calibKnee",	"FrontR","get",	{"remote":["B","B",	"S"],"func":"_calibServo({0}*2+0,{1})"}],
		["R", "calib fw/back %d.leg %d.calibC",			"calibCrotch",	"FrontR","get",	{"remote":["B","B",	"S"],"func":"_calibServo({0}*2+1,{1})"}],

		["w", "LED %d.color",							"setColorWipe",		"red",		{"remote":["B"],		"func":"quadCrawler_colorWipe({0});"}],
		["w", "LED rainbow %n sec",						"setRainbow",		5,			{"remote":["B"],		"func":"quadCrawler_rainbow({0});"}],
		["w", "beep %n",								"setBeep",			50,			{"remote":["S"],		"func":"quadCrawler_beep({0});"}],
		["R", "read Sonner",							"getSonner",					{"remote":[			"F"],"func":"quadCrawler_getSonner()"}],
		["B", "SW %d.sw is pressed",					"getSW",			1,			{"remote":["B",		"B"],"func":"(({0}>=1&&{0}<=4)?digitalRead(sw_table[{0}-1]):0)==0"}],

		["-"],	// ブロック区切り

		// robot.js呼び出し
		["B", "remote pressed",							"checkRemoteKey",				{"custom":"", 			"func":"remote.checkRemoteKey()"}],
		["B", "ir remote %d.ircode pressed",			"isRemoteKey",		"POWER",	{"custom":"",			"func":"remote.isRemoteKey({0})"}],
		["B", "analog remote %d.ircodeA pressed",		"isARemoteKey",		"A↑",		{"custom":"",			"func":"remote.isRemoteKey({0})"}],
		["R", "get remote X",							"getRemoteX",					{"custom":"",			"func":"remote.x"}],
		["R", "get remote Y",							"getRemoteY",					{"custom":"",			"func":"remote.y"}],

		["-"],

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"pinMode(P_LED,OUTPUT);digitalWrite(P_LED,{0});"}],
		// enum
		["r", "%d.ircode .",							"enumIrcode",		"POWER",	{"enum":"",				"func":"{0}"}],
		["r", "%d.ircodeA .",							"enumIrcodeA",		"A↑",		{"enum":"",				"func":"{0}"}],
		["r", "%d.color .",								"enumColor",		"red",		{"enum":"",				"func":"{0}"}],
		["r", "%d.walkcmd .",							"enumWalkcmd",		"fw",		{"enum":"",				"func":"{0}"}],
	],
	"menus": {
		"onoff":["On","Off"],
		"ircode":["POWER","MENU","TEST","RETURN","R0","C","↑","↓","←","→","CENTER","R1","R2","R3","R4","R5","R6","R7","R8","R9","B"],
		"ircodeA":["A CENTER","A U","A R","A L","A D","A↑→","A↑","A←↑","A→","A←","A↓→","A↓","A←↓"],

		"speed":["sslow","slow","typical","fast", "high"],
		"walkcmd":["stop","fw","cw","ccw","rw","right","left","all_up","all_down","t_down","h_down","l_down","r_down","t_up_down","l_r_up","all_up_down","neutral",],
		"color":["off","red","green","blue","yellow","purple","lightblue"],
		"knee":[-25,0,60,100],
		"crotchF":[-55,0,60],
		"crotchR":[-90,0,45],
		"sw":[1,2,3,4],
		"leg":["FrontR","FrontL","RearR","RearL",],
		"calibC":["forward_C","back_C","get","reset","reset_all",],
		"calibK":["up_K","down_K","get","reset","reset_all",],
	},
	"values":{
		"On":1,"Off":0,
		"POWER":0x45,"B":0x46,"MENU":0x47,"TEST":0x44,"RETURN":0x43,"R0":0x16,"C":0x0D,"↑":0x40,"↓":0x19,"←":0x07,"→":0x09,"CENTER":0x15,
		"R1":0x0C,"R2":0x18,"R3":0x5E,"R4":0x08,"R5":0x1C,"R6":0x5A,"R7":0x42,"R8":0x52,"R9":0x4A,
		"A CENTER":0x61,"A U":0x62,"A R":0x63,"A L":0x64,"A D":0x65,"A↑→":0x70,"A↑":0x71,"A←↑":0x72,"A→":0x73,"A←":0x74,"A↓→":0x75,"A↓":0x76,"A←↓":0x77,
		"sslow":2000,"slow":1000,"typical":500,"fast":200,"high":100,
		"stop":0,"fw":1,"cw":2,"ccw":3,"rw":4,"right":5,"left":6,"all_up":7,"all_down":8,"t_down":9,"h_down":10,"l_down":11,"r_down":12,"t_up_down":13,"l_r_up":14,"all_up_down":15,"neutral":16,
		"off":0,"red":1,"green":2,"blue":3,"yellow":4,"purple":5,"lightblue":6,
		"FrontR":0,"FrontL":2,"RearR":1,"RearL":3,
		"back_C":0,"forward_C":1,"get":2,"reset":3,"reset_all":4,
		"down_K":0,"up_K":1,
	},
	"translators":{
		"ja":{
			"set LED %d.onoff"								:"LEDを %d.onoff",
			"remote pressed"								:"リモコンボタンが押された",
			"ir remote %d.ircode pressed"					:"押されたのが %d.ircode のボタン",
			"analog remote %d.ircodeA pressed"				:"押されたのがアナログ %d.ircodeA のボタン",
			"get remote X"									:"アナログXの値",
			"get remote Y"									:"アナログYの値",

			"walk %d.walkcmd %d.speed"						:"動く %d.walkcmd %d.speed",
			"FrontR up/down %d.knee fw/back %d.crotchF"		:"右前脚 上下 %d.knee 前後 %d.crotchF",
			"FrontL up/down %d.knee fw/back %d.crotchF"		:"左前脚 上下 %d.knee 前後 %d.crotchF",
			"RearR  up/down %d.knee fw/back %d.crotchR"		:"右後脚 上下 %d.knee 前後 %d.crotchR",
			"RearL  up/down %d.knee fw/back %d.crotchR"		:"左後脚 上下 %d.knee 前後 %d.crotchR",

			"calib up/down %d.leg %d.calibK"				:"上下微調整 %d.leg %d.calibK",
			"calib fw/back %d.leg %d.calibC"				:"前後微調整 %d.leg %d.calibC",

			"LED rainbow %n sec"							:"LEDレインボー %n 秒",
			"beep %d"										:"ビープ %d",
			"read Sonner"									:"距離取得",
			"SW %d.sw is pressed"							:"スイッチ %d.sw が押された",

			"sslow":"超低速","slow":"低速","typical":"普通","fast":"高速","high":"超高速",
			"stop":"停止","fw":"前進","cw":"右旋回","ccw":"左旋回","rw":"後進","right":"右移動","left":"左移動",
			"all_up":"しゃがむ","all_down":"伸び","t_down":"後傾斜","h_down":"前傾斜","l_down":"左傾斜","r_down":"右傾斜","t_up_down":"背伸び","l_r_up":"左右傾斜","all_up_down":"スクワット","neutral":"原点調整",

			"FrontR":"右前脚","FrontL":"左前脚","RearR":"右後脚","RearL":"左後脚",
			"down_K":"下＋","up_K":"上＋","get":"現在値","reset":"リセット","reset_all":"全リセット",
			"back_C":"後＋","forward_C":"前＋",

			"off":"消す","red":"赤色","green":"緑色","blue":"青色","yellow":"黄色","purple":"紫色","lightblue":"水色",
		}
	},

	"scratch3constructor":"
		this.remoteKey = 0;
		this.remoteX = 0;
		this.remoteY = 0;
",

	"scratch3blocks":"
{blockType: BlockType.BOOLEAN, opcode: 'checkRemoteKey', text: [
	'remote pressed',
	'リモコンボタンが押された'
][this._locale], arguments: {
}},

{blockType: BlockType.BOOLEAN, opcode: 'isRemoteKey', text: [
	'ir remote [ARG1] pressed',
	'押されたのが [ARG1] のボタン'
][this._locale], arguments: {
    ARG1: { type: ArgumentType.STRING, defaultValue:'69', menu: 'ircode' },
}},

{blockType: BlockType.BOOLEAN, opcode: 'isARemoteKey', text: [
	'analog remote [ARG1] pressed',
	'押されたのがアナログ [ARG1] のボタン'
][this._locale], arguments: {
    ARG1: { type: ArgumentType.STRING, defaultValue:'113', menu: 'ircodeA' },
}},

{blockType: BlockType.REPORTER, opcode: 'getRemoteX', text: [
	'get remote X',
	'アナログXの値'
][this._locale], arguments: {
}},

{blockType: BlockType.REPORTER, opcode: 'getRemoteY', text: [
	'get remote Y',
	'アナログYの値'
][this._locale], arguments: {
}},
",

	"scratch3menus":"",

	"scratch3funcs":"
	checkRemoteKey(args) {
		let ret = this.comlib.sendRecv(0x80, {}, {});
		if(!(ret instanceof Promise)) return ret;

		const _this = this;
		return ret.then(data => {
			let tmp2 = new DataView(data.buffer);
			_this.remoteKey = tmp2.getUint8(0);
			_this.remoteX = tmp2.getInt16(1, true);
			_this.remoteY = tmp2.getInt16(3, true);
		//	console.log(_this.remoteKey, _this.remoteX, _this.remoteY);
			return _this.remoteKey;
		});
	}
	isRemoteKey(args) {
		return (this.remoteKey==Number(args.ARG1));
	}
	isARemoteKey(args) {
		return (this.remoteKey==Number(args.ARG1));
	}

	getRemoteX(args) {
		return this.remoteX;
	}

	getRemoteY(args) {
		return this.remoteY;
	}
",
}
