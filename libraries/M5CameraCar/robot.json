{
	"name"			: "M5CameraCar",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 11,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "http://sohta02.web.fc2.com/familyday_orgel.html",
	"productInfoURL": "http://sohta02.web.fc2.com/familyday_orgel.html",
	"sampleDir"		: "sample/WifiCar",							// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"libraryPath"	: "M5CameraCarLib",							// 専用ライブラリ(option)
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_enabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_921600"],

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"M5CameraCar\"

#include \"TukurutchEsp.h\"
#include \"M5CameraCar.h\"


WebsocketsServer wsServer;

#define P_LED	14

#define numof(a) (sizeof(a)/sizeof((a)[0]))

void _setLED(uint8_t onoff)
{
  digitalWrite(P_LED, !onoff);
  pinMode(P_LED, OUTPUT);
}

uint8_t _getSw(uint8_t idx)
{
  return 0;
}

const struct {uint8_t ledc; uint8_t port;} servoTable[] = {{8,13},{9,4}};
void _setServo(uint8_t idx, int16_t data/*normal:0~180, continuous:-100~+100*/, uint8_t continuous)
{
  if(idx >= numof(servoTable)) return;

  uint16_t pwmWidth;
  if(continuous) {
    #define srvZero 307		// 1.5ms/20ms*4096 = 307.2
    #define srvCoef 163		// (2.3ms-1.5ms)/20ms*4096 = 163.8
    if(data < -100) data = -100;
    else if(data > 100) data = 100;
    if(idx == 1) data = -data;
    pwmWidth = (data * srvCoef) / 100 + srvZero;
    if(data==0) pwmWidth=0;
  } else {
    #define srvMin 103		// 0.5ms/20ms*4096 = 102.4 (-90c)
    #define srvMax 491		// 2.4ms/20ms*4096 = 491.5 (+90c)
    if(data < 0) data = 0;
    else if(data > 180) data = 180;
    pwmWidth = (data * (srvMax - srvMin)) / 180 + srvMin;
  }
  ledcAttachPin(servoTable[idx].port, servoTable[idx].ledc);
  ledcWrite(servoTable[idx].ledc, pwmWidth);
}

struct { int16_t L; int16_t R;} static const dir_table[7] = {
//  L   R
  { 0,  0},  // STOP
  { 1,  1},  // FORWARD
  { 0,  1},  // LEFT
  { 1,  0},  // RIGHT
  {-1, -1},  // BACK
  {-1,  1},  // ROLL_LEFT
  { 1, -1},  // ROLL_RIGHT
};

void _setCar(uint8_t direction, uint8_t speed)
{
  _setServo(0, speed * dir_table[direction].L, 1);
  _setServo(1, speed * dir_table[direction].R, 1);
}

void onConnect(String ip)
{
  _setLED(1);

  wsServer.listen(PORT_WEBSOCKET);
  startCameraServer();
  Serial.println(ip);
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
int i;
_setLED(0);

for(i=0; i<numof(servoTable); i++)
  ledcSetup(servoTable[i].ledc, 50/*Hz*/, 12/*bit*/);
M5CameraCar_init();

Serial.begin(115200);
if(_getSw(1)) {
  delay(100);
  WiFi.mode(WIFI_STA);
  WiFi.beginSmartConfig();
  Serial.println(\"Waiting for SmartConfig.\");
  while (!WiFi.smartConfigDone()) {
    delay(2000);
    _setLED(1);
    delay(100);
    _setLED(0);
  }
  Serial.println(\"SmartConfig received.\");
}
#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
  loopWebSocket();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["w", "%d.direction at speed %n",				"setCar",  "run forward",100,	{"remote":["B","B"],	"func":"_setCar({0},{1});"}],
		["w", "set motor %d.servoch speed %d.speed",	"setMotor",			0,100,		{"remote":["B","S"],	"func":"_setServo({0},{1},1);"}],
		["w", "stop",									"stopCar",						{"remote":[],			"func":"_setCar(0,0);"}],
		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",				"func":"{0}"}],
		["w", "set servo %d.servoch %d.angle",			"setServo",			0,90,		{"remote":["B","B"],	"func":"_setServo({0},{1},0);"}],
	//	["w", "stop servo %d.servoch",					"stopServo",		0,			{"remote":["B"],		"func":"_setServo({0},0,1);"}],

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"_setLED({0});"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right"],
		"servoch"	:[0,1],
		"speed"		:[100,50,0,-50,-100],
		"angle"		:[0,90,180],
		"onoff"		:["On","Off"],
	},
	"values":{
		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,
		"On":1,"Off":0,
	},
	"translators":{
		"ja":{
			"stop":"ストップ", "run forward":"前", "turn left":"左", "turn right":"右", "run backward":"後", "rotate left":"左旋回", "rotate right":"右旋回",
			"%d.direction at speed %n"						:"%d.direction 向きに %n の速さで動かす",
			"set motor %d.servoch speed %d.speed"			:"モーター %d.servoch の速さを %d.speed にする",
			"set servo %d.servoch %d.angle"					:"サーボ %d.servoch の角度を %d.angle にする",
			"stop servo %d.servoch"							:"サーボ %d.servoch を止める",

			"set LED %d.onoff"								:"LED %d.onoff",
			"SW %d.sw"										:"スイッチ %d.sw",
		}
	}
}
