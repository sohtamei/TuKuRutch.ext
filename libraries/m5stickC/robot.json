{
	"name"			: "M5StickC",
	"port"			: 0,										// 変更禁止
	"boardType"		: "esp32:esp32:m5stick-c",					// package:platform:board

	"sort"			: 11,										// メニュー上の表示順序
	"extensionAuthor": "sohtamei",								// この拡張スクリプトの作者
	"helpURL"		: "http://sohta02.web.fc2.com/familyday_shield.html#m5stack",
	"productInfoURL": "http://sohta02.web.fc2.com/familyday_shield.html#m5stack",
	"sampleDir"		: "sample/m5stickC",						// サンプルディレクトリ
	"javascriptURL"	: "robot.js",
	"normalFW"		: "",										// 最初のプログラム,  .ino, .cpp.standard.hex
	"pcmodeFW"		: "robot_pcmode/robot_pcmode",				// PC modeプログラム, .ino, .cpp.standard.hex, .ino.template
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=m5stick-c_none",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=m5stick-c_default",
						"custom_UploadSpeed=m5stick-c_750000"],

	// C言語記述注意 : " を使うときは \" とすること

	// PCモード/書き込みモード ヘッダ (C言語)
	"header":"
#define mVersion \"M5StickC 1.0\"

#include <M5StickC.h>
#include <HTTPClient.h>
#include \"TukurutchEsp.h\"

uint8_t checkButton(uint8_t button)
{
  switch(button) {
  case 0: return M5.BtnA.isPressed();
  case 1: return M5.BtnB.isPressed();
//case 2: return M5.BtnC.isPressed();
  }
  return 0;
}

float getIMU(uint8_t index)
{
  float data[3];
  if(index < 3) {
    M5.IMU.getGyroData(data+0,data+1,data+2);
    return data[index-0];
  } else if(index < 6) {
    M5.IMU.getAccelData(data+0,data+1,data+2);
    return data[index-3];
  } else if(index < 9) {
    M5.IMU.getAhrsData(data+0,data+1,data+2);
    return data[index-6];
  } else {
    M5.IMU.getTempData(data+0);
    return data[0];
  }
}

String getHttp(char* url, uint8_t withErrorMsg)
{
  HTTPClient client;
  client.begin(url);
  int ret = client.GET();

  String result;
  if(ret == 200) {
    result = client.getString();
  } else {
    result = withErrorMsg ? client.errorToString(ret): \"\";
  }
  client.end();
  return result;
//	stringOne.toCharArray(charBuf, 50)
}

int8_t weather[4];
char wbuf[64];
char* getWeather(char* index)
{
  // 24:11/ 0. 0/5:10 17:00 東京都東京地方
  snprintf(wbuf,sizeof(wbuf),\"http://sohta02.web.fc2.com/w/%s.txt\",index);
  String str = getHttp(wbuf, false);
  int i;
  memset(wbuf,0,sizeof(wbuf));
  for(i = 0; i < 4; i++) weather[i] = -128; // INVALID
  if(str.length() > 12) {
    char tmp[5];
    const char separator[4] = {':','/','.','/'};
    char* dp2;
    const char* dp1 = str.c_str();
    for(int i = 0; i < 4; i++) {
      dp2 = strchr(dp1, separator[i]);
      if(dp2 == NULL) break;
      if(dp2-dp1<sizeof(tmp)-1 && memcmp(dp1,\"--\",2)) {
        memcpy(tmp, dp1, dp2-dp1);
        tmp[dp2-dp1] = 0;
        weather[i] = strtol(tmp, NULL, 10);
      }
      dp1 = dp2+1;
    }
    memcpy(wbuf, str.c_str(), dp1-str.c_str());
  }
  return wbuf;
}
",
	// PCモード/書き込みモード setup処理 (C言語)
	"setup":"
M5.begin(true, true, true); // init lcd, power, serial
M5.IMU.Init();
M5.Lcd.setRotation(3);

M5.Lcd.fillScreen(BLACK);
M5.Lcd.setTextSize(2);

M5.Lcd.setCursor(0, 0);
#ifdef PCMODE
  M5.Lcd.println(\"PC mode: \" mVersion);
#else
  M5.Lcd.println(\"Arduino mode: \" mVersion);
#endif

Serial.begin(115200);
initWifi(mVersion);
",
	// PCモード/書き込みモード loop処理 (C言語)
	"loop":"
M5.update();  // update button and speaker
delay(50);
",

	// PCモード/書き込みモード スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["h", "Program Start",							"runArduino",					{}],	// 変更禁止

		["-"],	// ブロック区切り

		["w", "set text %d.color size=%n",				"setText",			"WHITE", 2,	{"remote":["S","B"],	"func":"M5.Lcd.setTextColor({0});M5.Lcd.setTextSize({1});"}],
		["w", "set cursor at (%n ,%n )",				"setCursor",		0,0,		{"remote":["S","S"],	"func":"M5.Lcd.setCursor({0},{1});"}],
		["w", "print text %s",							"printText",		"test",		{"remote":["s"],		"func":"M5.Lcd.print({0});"}],
		["w", "print text %s and return",				"printlnText",		"test",		{"remote":["s"],		"func":"M5.Lcd.println({0});"}],
		["w", "draw text %s (%n ,%n ) font=%d.font",	"drawString","test",0,0,"Ascii16",{"remote":["s","S","S","B"],"func":"M5.Lcd.drawString({0},{1},{2},{3});"}],

		["w", "fill screen with %d.color",				"fillScreen",		"BLACK",	{"remote":["S"],		"func":"M5.Lcd.fillScreen({0});"}],
		["w", "circle at (%n ,%n ) r=%n with %d.color %d.fill",
											"drawCircle",	50,50,30,"WHITE","fill",	{"remote":["S","S","S","S","B"],			"func":"if({4}) M5.Lcd.fillCircle({0},{1},{2},{3}); else M5.Lcd.drawCircle({0},{1},{2},{3});"}],
		["w", "rect (%n ,%n ) w=%n h=%n with %d.color %d.fill",				
											"drawRect",		0,0,50,50,"WHITE","fill",	{"remote":["S","S","S","S","S","B"],		"func":"if({5}) M5.Lcd.fillRect({0},{1},{2},{3},{4}); else M5.Lcd.drawRect({0},{1},{2},{3},{4});"}],
		["w", "triangle (%n ,%n )-(%n ,%n )-(%n ,%n ) with %d.color %d.fill",
										"drawTriangle",0,0,50,0,0,50,"WHITE","fill",	{"remote":["S","S","S","S","S","S","S","B"],"func":"if({7}) M5.Lcd.fillTriangle({0},{1},{2},{3},{4},{5},{6}); else M5.Lcd.drawTriangle({0},{1},{2},{3},{4},{5},{6});"}],

		["w", "qrcode %s",							"qrcode",	"http://www.m5stack.com",{"remote":["s"],	"func":"M5.Lcd.qrcode({0});"}],

		["-"],

		["B", "%d.button is pressed",					"checkButton",		"buttonA",	{"remote":["B","B"],	"func":"checkButton({0})"}],

		["R", "get IMU %d.imu",							"getIMU",			"AccelX",	{"remote":["B","F"],	"func":"getIMU({0})"}],
		["w", "reset IMU",								"resetIMU",						{"remote":[],			"func":"M5.IMU.Init();"}],

		["w", "set digital pin %n output as %d.digital","setDigital",		13,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		9,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],

		["R", "天気(北海道) %m.hokkaido",				"getWHokkaido",	"石狩",			{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(東北) %m.tohoku",					"getWTohoku",	"岩手県 内陸",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(関東甲信越) %m.kantoKoshin",		"getWKantoKoshin","東京都 東京",{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(北陸) %m.hokuriku",					"getWHokuriku",	"新潟県 上越",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(東海) %m.tokai",					"getWTokai",	"愛知県 西部",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(近畿) %m.kinki",					"getWKinki",	"大阪府",		{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(中部) %m.chubu",					"getWChubu",	"広島県 南部",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(四国) %m.shikoku",					"getWShikoku",	"徳島県 北部",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(九州) %m.kyusyu",					"getWKyusyu",	"福岡県 福岡",	{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気(沖縄) %m.okinawa",					"getWOkinawa","沖縄本島 中南部",{"remote":["s",		"s"], "func":"getWeather({0})"}],
		["R", "天気 %d.weather",						"getWeather",	"最高気温",		{"remote":["B",		"s"], "func":"(weather[{0}]==-128?\"\":String(weather[{0}]))"}],
		["R", "get http %s",							"getHttp","http://sohta02.web.fc2.com/w/319.3.txt",
																						{"remote":["s",		"s"], "func":"getHttp({0},true)"}],
		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"button":["buttonA","buttonB","buttonC"],
		"color":["BLACK","NAVY","DARKGREEN","DARKCYAN","MAROON","PURPLE","OLIVE","LIGHTGREY","DARKGREY","BLUE","GREEN","CYAN","RED","MAGENTA","YELLOW","WHITE","ORANGE","GREENYELLOW","PINK"],
		"imu":["GyroX","GyroY","GyroZ","AccelX","AccelY","AccelZ","Pitch","Roll","Yaw","Temp"],

		"font":["Ascii8","Ascii16","Ascii26","Num48","7Seg48","Num75"],

		"note":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3",
				"C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5",
				"C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"noteJ1":["ド2","レ2","ミ2","ファ2","ソ2","ラ2","シ2","ド3","レ3","ミ3","ファ3","ソ3","ラ3","シ3",],
		"noteJ2":["ド4","レ4","ミ4","ファ4","ソ4","ラ4","シ4","ド5","レ5","ミ5","ファ5","ソ5","ラ5","シ5",],
		"noteJ3":["ド6","レ6","ミ6","ファ6","ソ6","ラ6","シ6","ド7","レ7","ミ7","ファ7","ソ7","ラ7","シ7","ド8","レ8"],
		"beats":["Half","Quarter","Eighth","Whole","Double"],
		"fill":["fill","draw"],

"hokkaido":["宗谷", "上川", "留萌", "網走", "北見", "紋別", "根室", "釧路", "十勝", "胆振", "日高", "石狩", "空知", "後志", "渡島", "檜山",],
"tohoku":["青森県 津軽", "青森県 下北", "青森県 三八上北", "秋田県 沿岸", "秋田県 内陸", "岩手県 内陸", "岩手県 沿岸北部", "岩手県 沿岸南部", "山形県 村山", "山形県 置賜", "山形県 庄内", "山形県 最上", "宮城県 東部", "宮城県 西部", "福島県 中通り", "福島県 浜通り", "福島県 会津",],
"kantoKoshin":["茨城県 北部", "茨城県 南部", "群馬県 南部", "群馬県 北部", "栃木県 南部", "栃木県 北部", "埼玉県 南部", "埼玉県 北部", "埼玉県 秩父", "千葉県 北西部", "千葉県 北東部", "千葉県 南部", "東京都 東京", "東京都 伊豆諸島北部", "東京都 伊豆諸島南部", "東京都 小笠原諸島", "神奈川県 東部", "神奈川県 西部", "山梨県 中･西部", "山梨県 東部･富士五湖", "長野県 北部", "長野県 中部", "長野県 南部",],
"hokuriku":["新潟県 下越", "新潟県 中越", "新潟県 上越", "新潟県 佐渡", "富山県 東部", "富山県 西部", "石川県 加賀", "石川県 能登", "福井県 嶺北", "福井県 嶺南",],
"tokai":["静岡県 中部", "静岡県 伊豆", "静岡県 東部", "静岡県 西部", "岐阜県 美濃", "岐阜県 飛騨", "愛知県 西部", "愛知県 東部", "三重県 北中部", "三重県 南部",],
"kinki":["大阪府", "兵庫県 南部", "兵庫県 北部", "京都府 南部", "京都府 北部", "滋賀県 南部", "滋賀県 北部", "奈良県 北部", "奈良県 南部", "和歌山県 北部", "和歌山県 南部",],
"chubu":["島根県 東部", "島根県 西部", "島根県 隠岐", "広島県 南部", "広島県 北部", "鳥取県 東部", "鳥取県 中･西部", "岡山県 南部", "岡山県 北部", "山口県 西部", "山口県 中部", "山口県 東部", "山口県 北部",],
"shikoku":["香川県", "愛媛県 中予", "愛媛県 東予", "愛媛県 南予", "徳島県 北部", "徳島県 南部", "高知県 中部", "高知県 東部", "高知県 西部",],
"kyusyu":["福岡県 福岡", "福岡県 北九州", "福岡県 筑豊", "福岡県 筑後", "佐賀県 南部", "佐賀県 北部", "長崎県 南部", "長崎県 北部", "長崎県 壱岐･対馬", "長崎県 五島", "熊本県 熊本", "熊本県 阿蘇", "熊本県 天草･芦北", "熊本県 球磨", "大分県 中部", "大分県 北部", "大分県 西部", "大分県 南部", "宮崎県 南部平野部", "宮崎県 北部平野部", "宮崎県 南部山沿い", "宮崎県 北部山沿い", "鹿児島県 薩摩", "鹿児島県 大隅", "鹿児島県 種子島･屋久島", "鹿児島県 奄美",],
"okinawa":["沖縄本島 中南部", "沖縄本島 北部", "久米島", "大東島", "宮古島", "石垣島", "与那国島",],
"weather":["最高気温","最低気温","降水確率午前","降水確率午後",],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"buttonA":0,"buttonB":1,"buttonC":2,
		"BLACK":0x0000,"NAVY":0x000F,"DARKGREEN":0x03E0,"DARKCYAN":0x03EF,"MAROON":0x7800,"PURPLE":0x780F,"OLIVE":0x7BE0,"LIGHTGREY":0xC618,"DARKGREY":0x7BEF,"BLUE":0x001F,"GREEN":0x07E0,"CYAN":0x07FF,"RED":0xF800,"MAGENTA":0xF81F,"YELLOW":0xFFE0,"WHITE":0xFFFF,"ORANGE":0xFD20,"GREENYELLOW":0xAFE5,"PINK":0xF81F,
		"GyroX":0,"GyroY":1,"GyroZ":2,"AccelX":3,"AccelY":4,"AccelZ":5,"Pitch":6,"Roll":7,"Yaw":8,"Temp":9,

		"Ascii8":1,"Ascii16":2,"Ascii26":4,"Num48":6,"7Seg48":7,"Num75":8,

		"C2":65,"D2":73,"E2":82,"F2":87,"G2":98,"A2":110,"B2":123,
		"C3":131,"D3":147,"E3":165,"F3":175,"G3":196,"A3":220,"B3":247,
		"C4":262,"D4":294,"E4":330,"F4":349,"G4":392,"A4":440,"B4":494,
		"C5":523,"D5":587,"E5":659,"F5":698,"G5":784,"A5":880,"B5":988,
		"C6":1047,"D6":1175,"E6":1319,"F6":1397,"G6":1568,"A6":1760,"B6":1976,
		"C7":2093,"D7":2349,"E7":2637,"F7":2794,"G7":3136,"A7":3520,"B7":3951,
		"C8":4186,"D8":4699,
		"ド2":65,"レ2":73,"ミ2":82,"ファ2":87,"ソ2":98,"ラ2":110,"シ2":123,
		"ド3":131,"レ3":147,"ミ3":165,"ファ3":175,"ソ3":196,"ラ3":220,"シ3":247,
		"ド4":262,"レ4":294,"ミ4":330,"ファ4":349,"ソ4":392,"ラ4":440,"シ4":494,
		"ド5":523,"レ5":587,"ミ5":659,"ファ5":698,"ソ5":784,"ラ5":880,"シ5":988,
		"ド6":1047,"レ6":1175,"ミ6":1319,"ファ6":1397,"ソ6":1568,"ラ6":1760,"シ6":1976,
		"ド7":2093,"レ7":2349,"ミ7":2637,"ファ7":2794,"ソ7":3136,"ラ7":3520,"シ7":3951,
		"ド8":4186,"レ8":4699,

		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,
		"fill":1,"draw":0,

"宗谷":"301.0", "上川":"302.1", "留萌":"302.0", "網走":"303.2", "北見":"303.1", "紋別":"303.0", "根室":"304.2", "釧路":"304.1", "十勝":"304.0", "胆振":"305.1", "日高":"305.0", "石狩":"306.2", "空知":"306.1", "後志":"306.0", "渡島":"307.1", "檜山":"307.0",
"青森県 津軽":"308.2", "青森県 下北":"308.1", "青森県 三八上北":"308.0", "秋田県 沿岸":"309.1", "秋田県 内陸":"309.0", "岩手県 内陸":"310.2", "岩手県 沿岸北部":"310.1", "岩手県 沿岸南部":"310.0", "山形県 村山":"311.3", "山形県 置賜":"311.2", "山形県 庄内":"311.1", "山形県 最上":"311.0", "宮城県 東部":"312.1", "宮城県 西部":"312.0", "福島県 中通り":"313.2", "福島県 浜通り":"313.1", "福島県 会津":"313.0",
"茨城県 北部":"314.1", "茨城県 南部":"314.0", "群馬県 南部":"315.1", "群馬県 北部":"315.0", "栃木県 南部":"316.1", "栃木県 北部":"316.0", "埼玉県 南部":"317.2", "埼玉県 北部":"317.1", "埼玉県 秩父":"317.0", "千葉県 北西部":"318.2", "千葉県 北東部":"318.1", "千葉県 南部":"318.0", "東京都 東京":"319.3", "東京都 伊豆諸島北部":"319.2", "東京都 伊豆諸島南部":"319.1", "東京都 小笠原諸島":"319.0", "神奈川県 東部":"320.1", "神奈川県 西部":"320.0", "山梨県 中･西部":"321.1", "山梨県 東部･富士五湖":"321.0", "長野県 北部":"322.2", "長野県 中部":"322.1", "長野県 南部":"322.0",
"新潟県 下越":"323.3", "新潟県 中越":"323.2", "新潟県 上越":"323.1", "新潟県 佐渡":"323.0", "富山県 東部":"324.1", "富山県 西部":"324.0", "石川県 加賀":"325.1", "石川県 能登":"325.0", "福井県 嶺北":"326.1", "福井県 嶺南":"326.0",
"静岡県 中部":"327.3", "静岡県 伊豆":"327.2", "静岡県 東部":"327.1", "静岡県 西部":"327.0", "岐阜県 美濃":"328.1", "岐阜県 飛騨":"328.0", "愛知県 西部":"329.1", "愛知県 東部":"329.0", "三重県 北中部":"330.1", "三重県 南部":"330.0",
"大阪府":"331.0", "兵庫県 南部":"332.1", "兵庫県 北部":"332.0", "京都府 南部":"333.1", "京都府 北部":"333.0", "滋賀県 南部":"334.1", "滋賀県 北部":"334.0", "奈良県 北部":"335.1", "奈良県 南部":"335.0", "和歌山県 北部":"336.1", "和歌山県 南部":"336.0",
"島根県 東部":"337.2", "島根県 西部":"337.1", "島根県 隠岐":"337.0", "広島県 南部":"338.1", "広島県 北部":"338.0", "鳥取県 東部":"339.1", "鳥取県 中･西部":"339.0", "岡山県 南部":"340.1", "岡山県 北部":"340.0", "山口県 西部":"345.3", "山口県 中部":"345.2", "山口県 東部":"345.1", "山口県 北部":"345.0",
"香川県":"341.0", "愛媛県 中予":"342.2", "愛媛県 東予":"342.1", "愛媛県 南予":"342.0", "徳島県 北部":"343.1", "徳島県 南部":"343.0", "高知県 中部":"344.2", "高知県 東部":"344.1", "高知県 西部":"344.0",
"福岡県 福岡":"346.3", "福岡県 北九州":"346.2", "福岡県 筑豊":"346.1", "福岡県 筑後":"346.0", "佐賀県 南部":"347.1", "佐賀県 北部":"347.0", "長崎県 南部":"348.3", "長崎県 北部":"348.2", "長崎県 壱岐･対馬":"348.1", "長崎県 五島":"348.0", "熊本県 熊本":"349.3", "熊本県 阿蘇":"349.2", "熊本県 天草･芦北":"349.1", "熊本県 球磨":"349.0", "大分県 中部":"350.3", "大分県 北部":"350.2", "大分県 西部":"350.1", "大分県 南部":"350.0", "宮崎県 南部平野部":"351.3", "宮崎県 北部平野部":"351.2", "宮崎県 南部山沿い":"351.1", "宮崎県 北部山沿い":"351.0", "鹿児島県 薩摩":"352.3", "鹿児島県 大隅":"352.2", "鹿児島県 種子島･屋久島":"352.1", "鹿児島県 奄美":"352.0",
"沖縄本島 中南部":"353.2", "沖縄本島 北部":"353.1", "久米島":"353.0", "大東島":"354.0", "宮古島":"355.0", "石垣島":"356.1", "与那国島":"356.0", 
"最高気温":0,"最低気温":1,"降水確率午前":2,"降水確率午後":3,
	},
	"translators":{
		"ja":{
			"set LED %d.onoff"								:"LEDを %d.onoff",
			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"set digital pin A%n output as %d.digital"		:"デジタルピン A%n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read digital pin A%n"							:"デジタルピン A%n",
			"read analog pin A%n"							:"アナログピン A%n",
		}
	}
}



/*
 *  System:
        M5.begin(LCDEnable, PowerEnable, SerialEnable);
        M5.update();

    LCD:
        M5.Lcd.drawPixel(int16_t x, int16_t y, uint16_t color);
        M5.Lcd.drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color);
        M5.Lcd.fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
        M5.Lcd.fillScreen(uint16_t color);
        M5.Lcd.drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
        M5.Lcd.drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,uint16_t color);
        M5.Lcd.fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
        M5.Lcd.fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,int16_t delta, uint16_t color);
        M5.Lcd.drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color);
        M5.Lcd.fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color);
        M5.Lcd.drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color);
        M5.Lcd.fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color);
        M5.Lcd.drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color);
        M5.Lcd.drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[], int16_t w, int16_t h),
        M5.Lcd.drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t size);
        M5.Lcd.setCursor(uint16_t x0, uint16_t y0);
        M5.Lcd.setTextColor(uint16_t color);
        M5.Lcd.setTextColor(uint16_t color, uint16_t backgroundcolor);
        M5.Lcd.setTextSize(uint8_t size);
        M5.Lcd.setTextWrap(boolean w);
        M5.Lcd.printf();
        M5.Lcd.print();
        M5.Lcd.println();
        M5.Lcd.drawCentreString(const char *string, int dX, int poY, int font);
        M5.Lcd.drawRightString(const char *string, int dX, int poY, int font);
        //M5.Lcd.drawJpg(const uint8_t *jpg_data, size_t jpg_len, uint16_t x, uint16_t y);
        //M5.Lcd.drawJpgFile(fs::FS &fs, const char *path, uint16_t x, uint16_t y);
        //M5.Lcd.drawBmpFile(fs::FS &fs, const char *path, uint16_t x, uint16_t y);

        M5.Lcd.drawFastHLine
        M5.Lcd.drawFastVLine
        M5.Lcd.drawFloat
        M5.Lcd.drawNumber
        M5.Lcd.begin();
        M5.Lcd.drawRect(15, 55, 50, 50, BLUE);
        M5.Lcd.drawString("1024",0, 80, 4);
        M5.Lcd.drawXBitmap(x, y, logo, logoWidth, logoHeight, TFT_BLACK);
        M5.Lcd.highlight(false);
        M5.Lcd.loadHzk16();
        M5.Lcd.qrcode("http://www.m5stack.com");
        M5.Lcd.setHighlightColor(RED);
        M5.Lcd.setRotation(1);
        M5.Lcd.setSwapBytes(false);
        M5.Lcd.setTextDatum(datum);
        M5.Lcd.setTextFont(2);
        M5.Lcd.writeHzk(AscStr);
*/
