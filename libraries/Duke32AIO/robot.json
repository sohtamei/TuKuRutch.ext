{
	"name"			: "Duke32AIO",
	"boardType"		: "esp32:esp32:esp32",						// package:platform:board

	"sort"			: 61,										// メニュー上の表示順序
	"normalFW"		: "robot_normal/robot_normal",				// 最初のプログラム,  .ino, .cpp.standard.hex
	"prefs"			: ["custom_CPUFreq=esp32_240",
						"custom_DebugLevel=esp32_none",
						"custom_EventsCore=esp32_1",
						"custom_FlashFreq=esp32_80",
						"custom_FlashMode=esp32_qio",
						"custom_FlashSize=esp32_4M",
						"custom_LoopCore=esp32_1",
						"custom_PSRAM=esp32_disabled",
						"custom_PartitionScheme=esp32_default",
						"custom_UploadSpeed=esp32_921600"],

	// C言語記述注意 : " を使うときは \" とすること

	// ヘッダ (C言語)
	"header":"
#define mVersion \"Duke32AIO 1.0\"

#include <Adafruit_NeoPixel.h>
#include \"TukurutchEsp.h\"

WebsocketsServer wsServer;

#define numof(a) (sizeof(a)/sizeof((a)[0]))

#define P_MOTOR0_IN1  13
#define P_MOTOR0_IN2  12
#define P_MOTOR0_EN   18
#define P_MOTOR1_IN1  14
#define P_MOTOR1_IN2  15
#define P_MOTOR1_EN   19
#define LEDC_MOTOR0  2
#define LEDC_MOTOR1  3

#define MotorL 0
#define MotorR 1

#define LEDC_SERVO0  0
#define LEDC_SERVO1  1

#define P_NEOPIXEL     27
#define PixelCount     64

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PixelCount, P_NEOPIXEL, NEO_GRB + NEO_KHZ800);
void SetNeoPixelRGB(uint8_t r, uint8_t g, uint8_t b)
{
  for(uint8_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, r, g, b);
    strip.show();
    delay(10);
  }
}

void SetNeoPixel(uint8_t index){
  int r,g,b;
  switch(index) {
    case 0: r=0;   g=0;   b=0;   break;  // black
    case 1: r=255; g=0;   b=0;   break;  // red
    case 2: r=0;   g=255; b=0;   break;  // green
    case 3: r=128; g=128; b=0;   break;  // yellow
    case 4: r=0;   g=0;   b=255; break;  // blue
    case 5: r=128; g=0;   b=128; break;  // magenta
    case 6: r=0;   g=128; b=128; break;  // cyan
    case 7: r=128; g=128; b=128; break;  // white
    default: return;
  }
  SetNeoPixelRGB(r, g, b);
}

void _setLED(uint8_t onoff)
{
  if(onoff)
    SetNeoPixel(4);
  else
    SetNeoPixel(0);
}

const struct {uint8_t ledc; uint8_t port;} servoTable[] = {{0,23},{1,4}};
void _setServo(uint8_t idx, int16_t data/*normal:0~180, continuous:-100~+100*/, uint8_t continuous)
{
  if(idx >= numof(servoTable)) return;

  uint16_t pwmWidth;
  if(continuous) {
    #define srvZero 307		// 1.5ms/20ms*4096 = 307.2
    #define srvCoef 163		// (2.3ms-1.5ms)/20ms*4096 = 163.8
    if(data < -100) data = -100;
    else if(data > 100) data = 100;
    if(idx == 1) data = -data;
    pwmWidth = (data * srvCoef) / 100 + srvZero;
    if(data==0 && continuous!=2) pwmWidth=0;
  } else {
    #define srvMin 103		// 0.5ms/20ms*4096 = 102.4 (-90c)
    #define srvMax 491		// 2.4ms/20ms*4096 = 491.5 (+90c)
    if(data < 0) data = 0;
    else if(data > 180) data = 180;
    pwmWidth = (data * (srvMax - srvMin)) / 180 + srvMin;
  }
  ledcAttachPin(servoTable[idx].port, servoTable[idx].ledc);
  ledcWrite(servoTable[idx].ledc, pwmWidth);
}

void _setMotor(uint8_t motorNo, int16_t speed){
  if(motorNo >= 2) return;

  int16_t abs = speed;
  if(abs < 0)   abs = -abs;
  if(abs > 100) abs = 100;
  ledcWrite(LEDC_MOTOR0+motorNo, (abs*255)/100);

  switch(motorNo) {
  case MotorL:
    digitalWrite(P_MOTOR0_IN1, (speed>0) ? HIGH:LOW);
    digitalWrite(P_MOTOR0_IN2, (speed<0) ? HIGH:LOW);
    break;
  case MotorR:
    digitalWrite(P_MOTOR1_IN1, (speed>0) ? HIGH:LOW);
    digitalWrite(P_MOTOR1_IN2, (speed<0) ? HIGH:LOW);
    break;
  }
}

struct { int16_t L; int16_t R;
} static const dir_table[7] = {
//  L   R
  { 0,  0},  // 0:STOP
  { 1,  1},  // 1:FORWARD
  { 0,  1},  // 2:LEFT
  { 1,  0},  // 3:RIGHT
  {-1, -1},  // 4:BACK
  {-1,  1},  // 5:ROLL_LEFT
  { 1, -1},  // 6:ROLL_RIGHT
};

void _setCar(uint8_t direction, uint8_t speed)
{
  _setMotor(MotorL, speed * dir_table[direction].L);
  _setMotor(MotorR, speed * dir_table[direction].R);
}

void onConnect(String ip)
{
  _setLED(1);

  wsServer.listen(PORT_WEBSOCKET);
  Serial.println(ip);
}
",
	// setup処理 (C言語)
	"setup":"
Serial.begin(115200);

strip.begin();
SetNeoPixel(0);

// DC motor
digitalWrite(P_MOTOR0_IN1, LOW);
digitalWrite(P_MOTOR0_IN2, LOW);
digitalWrite(P_MOTOR1_IN1, LOW);
digitalWrite(P_MOTOR1_IN2, LOW);
pinMode(P_MOTOR0_IN1, OUTPUT);
pinMode(P_MOTOR0_IN2, OUTPUT);
pinMode(P_MOTOR1_IN1, OUTPUT);
pinMode(P_MOTOR1_IN2, OUTPUT);
ledcSetup(servoTable[0].ledc, 50/*Hz*/, 12/*bit*/);
ledcSetup(servoTable[1].ledc, 50/*Hz*/, 12/*bit*/);

// servo motor
ledcSetup(LEDC_MOTOR0, 255/*Hz*/, 8/*bit*/);
ledcSetup(LEDC_MOTOR1, 255/*Hz*/, 8/*bit*/);
ledcAttachPin(P_MOTOR0_EN, LEDC_MOTOR0);
ledcAttachPin(P_MOTOR1_EN, LEDC_MOTOR1);

#ifndef PCMODE
initWifi(mVersion, true, onConnect);
#else
initWifi(mVersion, false, onConnect);
#endif
",
	// loop処理 (C言語)
	"loop":"
  loopWebSocket();
#ifndef PCMODE
  sendNotifyArduinoMode();
#endif
",

	// スクラッチブロック定義
	"blockSpecs": [
	// type			: w-実行関数, R-取得関数, B-true/false取得, h-プログラム開始
	// Block定義	: パラメータ %n-数値, %d-数値+enum, %s-文字列, %m-文字列+enum
	// remote		: 通常関数, 引数+戻値 型定義 B-int8, S-int16, L-int32, F-float, D-double, s-string, b-byteArray
	// custom		: 特殊関数, robot.js呼び出し(ext.Block名). PCモードと書き込みモードで処理を分けるとき使用。
	// enum			: enum値取得
	// 実行/取得関数: 引数 {0},{1}, 関数の区切り＝wブロック';', R/Bブロック','  (C言語)

	//  type | Block定義                               | Block名           | 初期値     |remote/custom/enum    | 実行/取得関数
	//-------+-----------------------------------------+-------------------+------------+----------------------+----------------------------------
		["-"],					// dummy

		["-"],	// ブロック区切り

		["w", "set LED %d.onoff",						"setLED",			"On",		{"remote":["B"],		"func":"_setLED({0});"}],
		["-"],//["R", "get IMU %d.imu",							"getIMU",			"AccelX",	{"remote":["B","F"],	"func":"getIMU({0})"}],
		["-"],//["w", "play tone on note %d.note beat %d.beats","Buzzer",	 	 "C4","Half",	{"remote":["S","S"],	"func":"_tone({0},{1});"}],
		["-"],//["w", "Beep",									"Beep",							{"remote":[],			"func":"_beep();"}],
		["-"],//["B", "%d.button is pressed",					"getSw",			"buttonA",	{"remote":["B","B"],	"func":"_getSw({0})"}],
		["w", "set digital pin %n output as %d.digital","setDigital",		33,"HIGH",	{"remote":["B","B"],	"func":"pinMode({0},OUTPUT);digitalWrite({0},{1});"}],
		["B", "read digital pin %n",					"getDigital",		33,			{"remote":["B",		"B"], "func":"pinMode({0},INPUT),digitalRead({0})"}],
		["R", "read analog pin %n average %n times",	"getAnalog",		35,4,		{"remote":["B","S",	"S"], "func":"getAdc1({0},{1})"}],

		["-"],

		["-"],//["w", "set text %d.color size=%n",				"setText",			"WHITE", 2,	{"remote":["S","B"],	"func":"M5.Lcd.setTextColor({0});M5.Lcd.setTextSize({1});"}],
		["-"],//["w", "set cursor at (%n ,%n )",				"setCursor",		0,0,		{"remote":["S","S"],	"func":"M5.Lcd.setCursor({0},{1});"}],
		["-"],//["w", "print text %s",							"printText",		"test",		{"remote":["s"],		"func":"M5.Lcd.print({0});"}],
		["-"],//["w", "print text %s and return",				"printlnText",		"test",		{"remote":["s"],		"func":"M5.Lcd.println({0});"}],
		["-"],//["w", "draw text %s (%n ,%n ) font=%d.font",	"drawString","test",0,0,"Ascii16",{"remote":["s","S","S","B"],"func":"M5.Lcd.drawString({0},{1},{2},{3});"}],
		["-"],//["w", "fill screen with %d.color",				"fillScreen",		"BLACK",	{"remote":["S"],		"func":"M5.Lcd.fillScreen({0}); M5.Lcd.setCursor(0,0);"}],

		["-"],

		["-"],//["w", "--- ServoCar ---",						"tagServo",						{"enum":"",					"func":"0"}],
		["w", "%d.direction at speed %n",				"setCar",  "run forward",100,	{"remote":["B","B"],	"func":"_setCar({0},{1});"}],
		["w", "set motor %d.motorch speed %d.speed",	"setMotor",			"ch-L",100,	{"remote":["B","S"],	"func":"_setMotor({0},{1});"}],
		["w", "stop",									"stopCar",						{"remote":[],			"func":"_setCar(0,0);_setServo(0,0,1);_setServo(1,0,1);"}],
		["R", "%d.direction .",							"enumDirection",  "run forward",{"enum":"",				"func":"{0}"}],
		["w", "set servo %d.servoch %d.angle",			"setServo",			0,90,		{"remote":["B","B"],	"func":"_setServo({0},{1},0);"}],
		//["w", "stop servo %d.servoch",					"stopServo",		0,			{"remote":["B"],		"func":"_setServo({0},0,1);"}],

		["-"],

		["w", "NeoPixel %d.neopixel",					"setNeoPixel",		"white",	{"remote":["B"],		"func":"SetNeoPixel({0});"}],
		["w", "NeoPixel red %n, green %n, blue %n",		"setNeoPixelRGB",	64,64,64,	{"remote":["B","B","B"],"func":"SetNeoPixelRGB({0},{1},{2});"}],

		["-"],

		// WiFi設定
		["R", "status WIFI",							"statusWifi",					{"remote":[			"s"],"func":"statusWifi()"}],
		["R", "scan WIFI",								"scanWifi",						{"remote":[			"s"],"func":"scanWifi()"}],
		["R", "connect WIFI %s %s",						"connectWifi","ssid","pass",	{"remote":["s","s",	"B"],"func":"connectWifi({0},{1})"}],
	],
	"menus": {
		"digital":["HIGH","LOW"],
		"onoff":["On","Off"],
		"direction"	:["stop","run forward","turn left","turn right","run backward","rotate left","rotate right"],
		"motorch"	:["ch-L","ch-R"],
		"servoch"	:[0,1],
		"speed"		:[100,50,0,-50,-100],
		"angle"		:[0,90,180],

		"neopixel"	:["off","red","green","yellow","blue","magenta","cyan","white"],
	},
	"values":{
		"HIGH":1,"LOW":0,
		"On":1,"Off":0,
		"stop":0,"run forward":1,"turn left":2,"turn right":3,"run backward":4,"rotate left":5,"rotate right":6,
		"ch-L":0,"ch-R":1,
		"off":0,"red":1,"green":2,"yellow":3,"blue":4,"magenta":5,"cyan":6,"white":7,
	},
	"translators":{
		"ja":{
			"stop":"ストップ", "run forward":"前", "turn left":"左", "turn right":"右", "run backward":"後", "rotate left":"左旋回", "rotate right":"右旋回",
			"%d.direction at speed %n"						:"%d.direction 向きに %n の速さで動かす",
			"set motor %d.motorch speed %d.speed"			:"モーター %d.motorch の速さを %d.speed にする",
			"set servo %d.servoch %d.angle"					:"サーボ %d.servoch の角度を %d.angle にする",
			"stop servo %d.servoch"							:"サーボ %d.servoch を止める",

			"set digital pin %n output as %d.digital"		:"デジタルピン %n の出力を %d.digital にする",
			"read digital pin %n"							:"デジタルピン %n",
			"read analog pin %n average %n times"			:"アナログピン %n の %n 回平均",
		}
	}
}
